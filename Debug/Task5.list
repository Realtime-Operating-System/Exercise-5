
Task5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034c4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003664  08003664  00004664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036e8  080036e8  00005014  2**0
                  CONTENTS
  4 .ARM          00000000  080036e8  080036e8  00005014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036e8  080036e8  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036e8  080036e8  000046e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036ec  080036ec  000046ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080036f0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004978  20000014  08003704  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000498c  08003704  0000598c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c79f  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021bc  00000000  00000000  000117e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  000139a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ba  00000000  00000000  00014538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002411  00000000  00000000  00014df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bdd7  00000000  00000000  00017203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c02f  00000000  00000000  00022fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000af009  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ec0  00000000  00000000  000af04c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000b1f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800364c 	.word	0x0800364c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	0800364c 	.word	0x0800364c

080001e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  HAL_Init();
 80001e4:	f000 f958 	bl	8000498 <HAL_Init>
  SystemClock_Config();
 80001e8:	f000 f824 	bl	8000234 <SystemClock_Config>
  MX_GPIO_Init();
 80001ec:	f000 f82a 	bl	8000244 <MX_GPIO_Init>

  osKernelInitialize();
 80001f0:	f000 fc70 	bl	8000ad4 <osKernelInitialize>
  FlashGreenLEDTaskHandle = osThreadNew(FlashGreenLED, NULL, &FlashGreenLEDTask_attributes);
 80001f4:	4a09      	ldr	r2, [pc, #36]	@ (800021c <main+0x3c>)
 80001f6:	2100      	movs	r1, #0
 80001f8:	4809      	ldr	r0, [pc, #36]	@ (8000220 <main+0x40>)
 80001fa:	f000 fcb5 	bl	8000b68 <osThreadNew>
 80001fe:	4603      	mov	r3, r0
 8000200:	4a08      	ldr	r2, [pc, #32]	@ (8000224 <main+0x44>)
 8000202:	6013      	str	r3, [r2, #0]
  FlashRedLEDTaskHandle = osThreadNew(FlashRedLED, NULL, &FlashRedLEDTask_attributes);
 8000204:	4a08      	ldr	r2, [pc, #32]	@ (8000228 <main+0x48>)
 8000206:	2100      	movs	r1, #0
 8000208:	4808      	ldr	r0, [pc, #32]	@ (800022c <main+0x4c>)
 800020a:	f000 fcad 	bl	8000b68 <osThreadNew>
 800020e:	4603      	mov	r3, r0
 8000210:	4a07      	ldr	r2, [pc, #28]	@ (8000230 <main+0x50>)
 8000212:	6013      	str	r3, [r2, #0]
  osKernelStart();
 8000214:	f000 fc82 	bl	8000b1c <osKernelStart>

  while (1)
 8000218:	bf00      	nop
 800021a:	e7fd      	b.n	8000218 <main+0x38>
 800021c:	080036a0 	.word	0x080036a0
 8000220:	080002d5 	.word	0x080002d5
 8000224:	20000030 	.word	0x20000030
 8000228:	080036c4 	.word	0x080036c4
 800022c:	08000305 	.word	0x08000305
 8000230:	20000034 	.word	0x20000034

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  /* Configure clock as needed */
}
 8000238:	bf00      	nop
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
	...

08000244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b088      	sub	sp, #32
 8000248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024a:	f107 030c 	add.w	r3, r7, #12
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
 8000258:	611a      	str	r2, [r3, #16]

  /* Enable GPIO Ports Clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800025a:	2300      	movs	r3, #0
 800025c:	60bb      	str	r3, [r7, #8]
 800025e:	4b1a      	ldr	r3, [pc, #104]	@ (80002c8 <MX_GPIO_Init+0x84>)
 8000260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000262:	4a19      	ldr	r2, [pc, #100]	@ (80002c8 <MX_GPIO_Init+0x84>)
 8000264:	f043 0301 	orr.w	r3, r3, #1
 8000268:	6313      	str	r3, [r2, #48]	@ 0x30
 800026a:	4b17      	ldr	r3, [pc, #92]	@ (80002c8 <MX_GPIO_Init+0x84>)
 800026c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800026e:	f003 0301 	and.w	r3, r3, #1
 8000272:	60bb      	str	r3, [r7, #8]
 8000274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000276:	2300      	movs	r3, #0
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	4b13      	ldr	r3, [pc, #76]	@ (80002c8 <MX_GPIO_Init+0x84>)
 800027c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800027e:	4a12      	ldr	r2, [pc, #72]	@ (80002c8 <MX_GPIO_Init+0x84>)
 8000280:	f043 0302 	orr.w	r3, r3, #2
 8000284:	6313      	str	r3, [r2, #48]	@ 0x30
 8000286:	4b10      	ldr	r3, [pc, #64]	@ (80002c8 <MX_GPIO_Init+0x84>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800028a:	f003 0302 	and.w	r3, r3, #2
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	687b      	ldr	r3, [r7, #4]

  /* Configure GPIO pin for Green LED (PA5) */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000292:	2320      	movs	r3, #32
 8000294:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000296:	2301      	movs	r3, #1
 8000298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029a:	2300      	movs	r3, #0
 800029c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800029e:	2300      	movs	r3, #0
 80002a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a2:	f107 030c 	add.w	r3, r7, #12
 80002a6:	4619      	mov	r1, r3
 80002a8:	4808      	ldr	r0, [pc, #32]	@ (80002cc <MX_GPIO_Init+0x88>)
 80002aa:	f000 fa41 	bl	8000730 <HAL_GPIO_Init>

  /* Configure GPIO pin for Red LED (PB0) and Blue LED (PB7) */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_7;
 80002ae:	2381      	movs	r3, #129	@ 0x81
 80002b0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002b2:	f107 030c 	add.w	r3, r7, #12
 80002b6:	4619      	mov	r1, r3
 80002b8:	4805      	ldr	r0, [pc, #20]	@ (80002d0 <MX_GPIO_Init+0x8c>)
 80002ba:	f000 fa39 	bl	8000730 <HAL_GPIO_Init>
}
 80002be:	bf00      	nop
 80002c0:	3720      	adds	r7, #32
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40023800 	.word	0x40023800
 80002cc:	40020000 	.word	0x40020000
 80002d0:	40020400 	.word	0x40020400

080002d4 <FlashGreenLED>:
  * @brief Function implementing the FlashGreenLED task.
  * @param argument: Not used
  * @retval None
  */
void FlashGreenLED(void *argument)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 for(;;)
  {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80002dc:	2201      	movs	r2, #1
 80002de:	2120      	movs	r1, #32
 80002e0:	4807      	ldr	r0, [pc, #28]	@ (8000300 <FlashGreenLED+0x2c>)
 80002e2:	f000 fba9 	bl	8000a38 <HAL_GPIO_WritePin>
    AccessSharedData();
 80002e6:	f000 f825 	bl	8000334 <AccessSharedData>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2120      	movs	r1, #32
 80002ee:	4804      	ldr	r0, [pc, #16]	@ (8000300 <FlashGreenLED+0x2c>)
 80002f0:	f000 fba2 	bl	8000a38 <HAL_GPIO_WritePin>
    osDelay(500);
 80002f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002f8:	f000 fcc8 	bl	8000c8c <osDelay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80002fc:	bf00      	nop
 80002fe:	e7ed      	b.n	80002dc <FlashGreenLED+0x8>
 8000300:	40020000 	.word	0x40020000

08000304 <FlashRedLED>:
  * @brief Function implementing the FlashRedLED task.
  * @param argument: Not used
  * @retval None
  */
void FlashRedLED(void *argument)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800030c:	2201      	movs	r2, #1
 800030e:	2101      	movs	r1, #1
 8000310:	4807      	ldr	r0, [pc, #28]	@ (8000330 <FlashRedLED+0x2c>)
 8000312:	f000 fb91 	bl	8000a38 <HAL_GPIO_WritePin>
    AccessSharedData();
 8000316:	f000 f80d 	bl	8000334 <AccessSharedData>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800031a:	2200      	movs	r2, #0
 800031c:	2101      	movs	r1, #1
 800031e:	4804      	ldr	r0, [pc, #16]	@ (8000330 <FlashRedLED+0x2c>)
 8000320:	f000 fb8a 	bl	8000a38 <HAL_GPIO_WritePin>
    osDelay(100);
 8000324:	2064      	movs	r0, #100	@ 0x64
 8000326:	f000 fcb1 	bl	8000c8c <osDelay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800032a:	bf00      	nop
 800032c:	e7ee      	b.n	800030c <FlashRedLED+0x8>
 800032e:	bf00      	nop
 8000330:	40020400 	.word	0x40020400

08000334 <AccessSharedData>:
/**
  * @brief Access shared data and check for collisions.
  * @retval None
  */
void AccessSharedData(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
    if (start_flag == 1)
 8000338:	4b0d      	ldr	r3, [pc, #52]	@ (8000370 <AccessSharedData+0x3c>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b01      	cmp	r3, #1
 800033e:	d103      	bne.n	8000348 <AccessSharedData+0x14>
    {
        start_flag = 0;
 8000340:	4b0b      	ldr	r3, [pc, #44]	@ (8000370 <AccessSharedData+0x3c>)
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	e004      	b.n	8000352 <AccessSharedData+0x1e>
    }
    else
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000348:	2201      	movs	r2, #1
 800034a:	2180      	movs	r1, #128	@ 0x80
 800034c:	4809      	ldr	r0, [pc, #36]	@ (8000374 <AccessSharedData+0x40>)
 800034e:	f000 fb73 	bl	8000a38 <HAL_GPIO_WritePin>
    }

    osDelay(500);
 8000352:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000356:	f000 fc99 	bl	8000c8c <osDelay>

    start_flag = 1;
 800035a:	4b05      	ldr	r3, [pc, #20]	@ (8000370 <AccessSharedData+0x3c>)
 800035c:	2201      	movs	r2, #1
 800035e:	601a      	str	r2, [r3, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	2180      	movs	r1, #128	@ 0x80
 8000364:	4803      	ldr	r0, [pc, #12]	@ (8000374 <AccessSharedData+0x40>)
 8000366:	f000 fb67 	bl	8000a38 <HAL_GPIO_WritePin>
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000000 	.word	0x20000000
 8000374:	40020400 	.word	0x40020400

08000378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800037e:	2300      	movs	r3, #0
 8000380:	607b      	str	r3, [r7, #4]
 8000382:	4b12      	ldr	r3, [pc, #72]	@ (80003cc <HAL_MspInit+0x54>)
 8000384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000386:	4a11      	ldr	r2, [pc, #68]	@ (80003cc <HAL_MspInit+0x54>)
 8000388:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800038c:	6453      	str	r3, [r2, #68]	@ 0x44
 800038e:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <HAL_MspInit+0x54>)
 8000390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000392:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800039a:	2300      	movs	r3, #0
 800039c:	603b      	str	r3, [r7, #0]
 800039e:	4b0b      	ldr	r3, [pc, #44]	@ (80003cc <HAL_MspInit+0x54>)
 80003a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003a2:	4a0a      	ldr	r2, [pc, #40]	@ (80003cc <HAL_MspInit+0x54>)
 80003a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80003aa:	4b08      	ldr	r3, [pc, #32]	@ (80003cc <HAL_MspInit+0x54>)
 80003ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003b2:	603b      	str	r3, [r7, #0]
 80003b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003b6:	2200      	movs	r2, #0
 80003b8:	210f      	movs	r1, #15
 80003ba:	f06f 0001 	mvn.w	r0, #1
 80003be:	f000 f98e 	bl	80006de <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	40023800 	.word	0x40023800

080003d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003d4:	bf00      	nop
 80003d6:	e7fd      	b.n	80003d4 <NMI_Handler+0x4>

080003d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003dc:	bf00      	nop
 80003de:	e7fd      	b.n	80003dc <HardFault_Handler+0x4>

080003e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003e4:	bf00      	nop
 80003e6:	e7fd      	b.n	80003e4 <MemManage_Handler+0x4>

080003e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003ec:	bf00      	nop
 80003ee:	e7fd      	b.n	80003ec <BusFault_Handler+0x4>

080003f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f4:	bf00      	nop
 80003f6:	e7fd      	b.n	80003f4 <UsageFault_Handler+0x4>

080003f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr

08000406 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800040a:	f000 f897 	bl	800053c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800040e:	f002 f865 	bl	80024dc <xTaskGetSchedulerState>
 8000412:	4603      	mov	r3, r0
 8000414:	2b01      	cmp	r3, #1
 8000416:	d001      	beq.n	800041c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000418:	f002 fe5e 	bl	80030d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}

08000420 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000424:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <SystemInit+0x20>)
 8000426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800042a:	4a05      	ldr	r2, [pc, #20]	@ (8000440 <SystemInit+0x20>)
 800042c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000430:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	e000ed00 	.word	0xe000ed00

08000444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000444:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800047c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000448:	f7ff ffea 	bl	8000420 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800044c:	480c      	ldr	r0, [pc, #48]	@ (8000480 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800044e:	490d      	ldr	r1, [pc, #52]	@ (8000484 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000450:	4a0d      	ldr	r2, [pc, #52]	@ (8000488 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000454:	e002      	b.n	800045c <LoopCopyDataInit>

08000456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800045a:	3304      	adds	r3, #4

0800045c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800045c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800045e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000460:	d3f9      	bcc.n	8000456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000462:	4a0a      	ldr	r2, [pc, #40]	@ (800048c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000464:	4c0a      	ldr	r4, [pc, #40]	@ (8000490 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000468:	e001      	b.n	800046e <LoopFillZerobss>

0800046a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800046a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800046c:	3204      	adds	r2, #4

0800046e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800046e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000470:	d3fb      	bcc.n	800046a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000472:	f003 f8b9 	bl	80035e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000476:	f7ff feb3 	bl	80001e0 <main>
  bx  lr    
 800047a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800047c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000484:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000488:	080036f0 	.word	0x080036f0
  ldr r2, =_sbss
 800048c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000490:	2000498c 	.word	0x2000498c

08000494 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000494:	e7fe      	b.n	8000494 <ADC_IRQHandler>
	...

08000498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800049c:	4b0e      	ldr	r3, [pc, #56]	@ (80004d8 <HAL_Init+0x40>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a0d      	ldr	r2, [pc, #52]	@ (80004d8 <HAL_Init+0x40>)
 80004a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004a8:	4b0b      	ldr	r3, [pc, #44]	@ (80004d8 <HAL_Init+0x40>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a0a      	ldr	r2, [pc, #40]	@ (80004d8 <HAL_Init+0x40>)
 80004ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004b4:	4b08      	ldr	r3, [pc, #32]	@ (80004d8 <HAL_Init+0x40>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a07      	ldr	r2, [pc, #28]	@ (80004d8 <HAL_Init+0x40>)
 80004ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004c0:	2003      	movs	r0, #3
 80004c2:	f000 f901 	bl	80006c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004c6:	200f      	movs	r0, #15
 80004c8:	f000 f808 	bl	80004dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004cc:	f7ff ff54 	bl	8000378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004d0:	2300      	movs	r3, #0
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40023c00 	.word	0x40023c00

080004dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e4:	4b12      	ldr	r3, [pc, #72]	@ (8000530 <HAL_InitTick+0x54>)
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	4b12      	ldr	r3, [pc, #72]	@ (8000534 <HAL_InitTick+0x58>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	4619      	mov	r1, r3
 80004ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80004f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 f90b 	bl	8000716 <HAL_SYSTICK_Config>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000506:	2301      	movs	r3, #1
 8000508:	e00e      	b.n	8000528 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2b0f      	cmp	r3, #15
 800050e:	d80a      	bhi.n	8000526 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000510:	2200      	movs	r2, #0
 8000512:	6879      	ldr	r1, [r7, #4]
 8000514:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000518:	f000 f8e1 	bl	80006de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800051c:	4a06      	ldr	r2, [pc, #24]	@ (8000538 <HAL_InitTick+0x5c>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000522:	2300      	movs	r3, #0
 8000524:	e000      	b.n	8000528 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000526:	2301      	movs	r3, #1
}
 8000528:	4618      	mov	r0, r3
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000004 	.word	0x20000004
 8000534:	2000000c 	.word	0x2000000c
 8000538:	20000008 	.word	0x20000008

0800053c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000540:	4b06      	ldr	r3, [pc, #24]	@ (800055c <HAL_IncTick+0x20>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	461a      	mov	r2, r3
 8000546:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <HAL_IncTick+0x24>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4413      	add	r3, r2
 800054c:	4a04      	ldr	r2, [pc, #16]	@ (8000560 <HAL_IncTick+0x24>)
 800054e:	6013      	str	r3, [r2, #0]
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	2000000c 	.word	0x2000000c
 8000560:	20000038 	.word	0x20000038

08000564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f003 0307 	and.w	r3, r3, #7
 8000572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000574:	4b0c      	ldr	r3, [pc, #48]	@ (80005a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800057a:	68ba      	ldr	r2, [r7, #8]
 800057c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000580:	4013      	ands	r3, r2
 8000582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800058c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000590:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000596:	4a04      	ldr	r2, [pc, #16]	@ (80005a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	60d3      	str	r3, [r2, #12]
}
 800059c:	bf00      	nop
 800059e:	3714      	adds	r7, #20
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	e000ed00 	.word	0xe000ed00

080005ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b0:	4b04      	ldr	r3, [pc, #16]	@ (80005c4 <__NVIC_GetPriorityGrouping+0x18>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	f003 0307 	and.w	r3, r3, #7
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	db0a      	blt.n	80005f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	490c      	ldr	r1, [pc, #48]	@ (8000614 <__NVIC_SetPriority+0x4c>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	0112      	lsls	r2, r2, #4
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	440b      	add	r3, r1
 80005ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005f0:	e00a      	b.n	8000608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4908      	ldr	r1, [pc, #32]	@ (8000618 <__NVIC_SetPriority+0x50>)
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	f003 030f 	and.w	r3, r3, #15
 80005fe:	3b04      	subs	r3, #4
 8000600:	0112      	lsls	r2, r2, #4
 8000602:	b2d2      	uxtb	r2, r2
 8000604:	440b      	add	r3, r1
 8000606:	761a      	strb	r2, [r3, #24]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000e100 	.word	0xe000e100
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800061c:	b480      	push	{r7}
 800061e:	b089      	sub	sp, #36	@ 0x24
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f003 0307 	and.w	r3, r3, #7
 800062e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	f1c3 0307 	rsb	r3, r3, #7
 8000636:	2b04      	cmp	r3, #4
 8000638:	bf28      	it	cs
 800063a:	2304      	movcs	r3, #4
 800063c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063e:	69fb      	ldr	r3, [r7, #28]
 8000640:	3304      	adds	r3, #4
 8000642:	2b06      	cmp	r3, #6
 8000644:	d902      	bls.n	800064c <NVIC_EncodePriority+0x30>
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	3b03      	subs	r3, #3
 800064a:	e000      	b.n	800064e <NVIC_EncodePriority+0x32>
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000650:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	fa02 f303 	lsl.w	r3, r2, r3
 800065a:	43da      	mvns	r2, r3
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	401a      	ands	r2, r3
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000664:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000668:	697b      	ldr	r3, [r7, #20]
 800066a:	fa01 f303 	lsl.w	r3, r1, r3
 800066e:	43d9      	mvns	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000674:	4313      	orrs	r3, r2
         );
}
 8000676:	4618      	mov	r0, r3
 8000678:	3724      	adds	r7, #36	@ 0x24
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
	...

08000684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	3b01      	subs	r3, #1
 8000690:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000694:	d301      	bcc.n	800069a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000696:	2301      	movs	r3, #1
 8000698:	e00f      	b.n	80006ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800069a:	4a0a      	ldr	r2, [pc, #40]	@ (80006c4 <SysTick_Config+0x40>)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3b01      	subs	r3, #1
 80006a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006a2:	210f      	movs	r1, #15
 80006a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006a8:	f7ff ff8e 	bl	80005c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006ac:	4b05      	ldr	r3, [pc, #20]	@ (80006c4 <SysTick_Config+0x40>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006b2:	4b04      	ldr	r3, [pc, #16]	@ (80006c4 <SysTick_Config+0x40>)
 80006b4:	2207      	movs	r2, #7
 80006b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006b8:	2300      	movs	r3, #0
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	e000e010 	.word	0xe000e010

080006c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff ff47 	bl	8000564 <__NVIC_SetPriorityGrouping>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006de:	b580      	push	{r7, lr}
 80006e0:	b086      	sub	sp, #24
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	4603      	mov	r3, r0
 80006e6:	60b9      	str	r1, [r7, #8]
 80006e8:	607a      	str	r2, [r7, #4]
 80006ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006f0:	f7ff ff5c 	bl	80005ac <__NVIC_GetPriorityGrouping>
 80006f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	68b9      	ldr	r1, [r7, #8]
 80006fa:	6978      	ldr	r0, [r7, #20]
 80006fc:	f7ff ff8e 	bl	800061c <NVIC_EncodePriority>
 8000700:	4602      	mov	r2, r0
 8000702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000706:	4611      	mov	r1, r2
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff5d 	bl	80005c8 <__NVIC_SetPriority>
}
 800070e:	bf00      	nop
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b082      	sub	sp, #8
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f7ff ffb0 	bl	8000684 <SysTick_Config>
 8000724:	4603      	mov	r3, r0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000730:	b480      	push	{r7}
 8000732:	b089      	sub	sp, #36	@ 0x24
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
 800074a:	e159      	b.n	8000a00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800074c:	2201      	movs	r2, #1
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	fa02 f303 	lsl.w	r3, r2, r3
 8000754:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	697a      	ldr	r2, [r7, #20]
 800075c:	4013      	ands	r3, r2
 800075e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000760:	693a      	ldr	r2, [r7, #16]
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	429a      	cmp	r2, r3
 8000766:	f040 8148 	bne.w	80009fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	f003 0303 	and.w	r3, r3, #3
 8000772:	2b01      	cmp	r3, #1
 8000774:	d005      	beq.n	8000782 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800077e:	2b02      	cmp	r3, #2
 8000780:	d130      	bne.n	80007e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	2203      	movs	r2, #3
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
 8000792:	43db      	mvns	r3, r3
 8000794:	69ba      	ldr	r2, [r7, #24]
 8000796:	4013      	ands	r3, r2
 8000798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	68da      	ldr	r2, [r3, #12]
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	69ba      	ldr	r2, [r7, #24]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	69ba      	ldr	r2, [r7, #24]
 80007b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007b8:	2201      	movs	r2, #1
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	fa02 f303 	lsl.w	r3, r2, r3
 80007c0:	43db      	mvns	r3, r3
 80007c2:	69ba      	ldr	r2, [r7, #24]
 80007c4:	4013      	ands	r3, r2
 80007c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	091b      	lsrs	r3, r3, #4
 80007ce:	f003 0201 	and.w	r2, r3, #1
 80007d2:	69fb      	ldr	r3, [r7, #28]
 80007d4:	fa02 f303 	lsl.w	r3, r2, r3
 80007d8:	69ba      	ldr	r2, [r7, #24]
 80007da:	4313      	orrs	r3, r2
 80007dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	69ba      	ldr	r2, [r7, #24]
 80007e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	f003 0303 	and.w	r3, r3, #3
 80007ec:	2b03      	cmp	r3, #3
 80007ee:	d017      	beq.n	8000820 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	2203      	movs	r2, #3
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	43db      	mvns	r3, r3
 8000802:	69ba      	ldr	r2, [r7, #24]
 8000804:	4013      	ands	r3, r2
 8000806:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	689a      	ldr	r2, [r3, #8]
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	fa02 f303 	lsl.w	r3, r2, r3
 8000814:	69ba      	ldr	r2, [r7, #24]
 8000816:	4313      	orrs	r3, r2
 8000818:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	69ba      	ldr	r2, [r7, #24]
 800081e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	f003 0303 	and.w	r3, r3, #3
 8000828:	2b02      	cmp	r3, #2
 800082a:	d123      	bne.n	8000874 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	08da      	lsrs	r2, r3, #3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3208      	adds	r2, #8
 8000834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000838:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	f003 0307 	and.w	r3, r3, #7
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	220f      	movs	r2, #15
 8000844:	fa02 f303 	lsl.w	r3, r2, r3
 8000848:	43db      	mvns	r3, r3
 800084a:	69ba      	ldr	r2, [r7, #24]
 800084c:	4013      	ands	r3, r2
 800084e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	691a      	ldr	r2, [r3, #16]
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	69ba      	ldr	r2, [r7, #24]
 8000862:	4313      	orrs	r3, r2
 8000864:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	08da      	lsrs	r2, r3, #3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3208      	adds	r2, #8
 800086e:	69b9      	ldr	r1, [r7, #24]
 8000870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	2203      	movs	r2, #3
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	43db      	mvns	r3, r3
 8000886:	69ba      	ldr	r2, [r7, #24]
 8000888:	4013      	ands	r3, r2
 800088a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	f003 0203 	and.w	r2, r3, #3
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	69ba      	ldr	r2, [r7, #24]
 800089e:	4313      	orrs	r3, r2
 80008a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	f000 80a2 	beq.w	80009fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	4b57      	ldr	r3, [pc, #348]	@ (8000a18 <HAL_GPIO_Init+0x2e8>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008be:	4a56      	ldr	r2, [pc, #344]	@ (8000a18 <HAL_GPIO_Init+0x2e8>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008c6:	4b54      	ldr	r3, [pc, #336]	@ (8000a18 <HAL_GPIO_Init+0x2e8>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80008d2:	4a52      	ldr	r2, [pc, #328]	@ (8000a1c <HAL_GPIO_Init+0x2ec>)
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	089b      	lsrs	r3, r3, #2
 80008d8:	3302      	adds	r3, #2
 80008da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	f003 0303 	and.w	r3, r3, #3
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	220f      	movs	r2, #15
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43db      	mvns	r3, r3
 80008f0:	69ba      	ldr	r2, [r7, #24]
 80008f2:	4013      	ands	r3, r2
 80008f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a49      	ldr	r2, [pc, #292]	@ (8000a20 <HAL_GPIO_Init+0x2f0>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d019      	beq.n	8000932 <HAL_GPIO_Init+0x202>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a48      	ldr	r2, [pc, #288]	@ (8000a24 <HAL_GPIO_Init+0x2f4>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d013      	beq.n	800092e <HAL_GPIO_Init+0x1fe>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a47      	ldr	r2, [pc, #284]	@ (8000a28 <HAL_GPIO_Init+0x2f8>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d00d      	beq.n	800092a <HAL_GPIO_Init+0x1fa>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a46      	ldr	r2, [pc, #280]	@ (8000a2c <HAL_GPIO_Init+0x2fc>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d007      	beq.n	8000926 <HAL_GPIO_Init+0x1f6>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a45      	ldr	r2, [pc, #276]	@ (8000a30 <HAL_GPIO_Init+0x300>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d101      	bne.n	8000922 <HAL_GPIO_Init+0x1f2>
 800091e:	2304      	movs	r3, #4
 8000920:	e008      	b.n	8000934 <HAL_GPIO_Init+0x204>
 8000922:	2307      	movs	r3, #7
 8000924:	e006      	b.n	8000934 <HAL_GPIO_Init+0x204>
 8000926:	2303      	movs	r3, #3
 8000928:	e004      	b.n	8000934 <HAL_GPIO_Init+0x204>
 800092a:	2302      	movs	r3, #2
 800092c:	e002      	b.n	8000934 <HAL_GPIO_Init+0x204>
 800092e:	2301      	movs	r3, #1
 8000930:	e000      	b.n	8000934 <HAL_GPIO_Init+0x204>
 8000932:	2300      	movs	r3, #0
 8000934:	69fa      	ldr	r2, [r7, #28]
 8000936:	f002 0203 	and.w	r2, r2, #3
 800093a:	0092      	lsls	r2, r2, #2
 800093c:	4093      	lsls	r3, r2
 800093e:	69ba      	ldr	r2, [r7, #24]
 8000940:	4313      	orrs	r3, r2
 8000942:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000944:	4935      	ldr	r1, [pc, #212]	@ (8000a1c <HAL_GPIO_Init+0x2ec>)
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	089b      	lsrs	r3, r3, #2
 800094a:	3302      	adds	r3, #2
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000952:	4b38      	ldr	r3, [pc, #224]	@ (8000a34 <HAL_GPIO_Init+0x304>)
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	43db      	mvns	r3, r3
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	4013      	ands	r3, r2
 8000960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800096a:	2b00      	cmp	r3, #0
 800096c:	d003      	beq.n	8000976 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800096e:	69ba      	ldr	r2, [r7, #24]
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	4313      	orrs	r3, r2
 8000974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000976:	4a2f      	ldr	r2, [pc, #188]	@ (8000a34 <HAL_GPIO_Init+0x304>)
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800097c:	4b2d      	ldr	r3, [pc, #180]	@ (8000a34 <HAL_GPIO_Init+0x304>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	43db      	mvns	r3, r3
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	4013      	ands	r3, r2
 800098a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000994:	2b00      	cmp	r3, #0
 8000996:	d003      	beq.n	80009a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	4313      	orrs	r3, r2
 800099e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80009a0:	4a24      	ldr	r2, [pc, #144]	@ (8000a34 <HAL_GPIO_Init+0x304>)
 80009a2:	69bb      	ldr	r3, [r7, #24]
 80009a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80009a6:	4b23      	ldr	r3, [pc, #140]	@ (8000a34 <HAL_GPIO_Init+0x304>)
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	43db      	mvns	r3, r3
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	4013      	ands	r3, r2
 80009b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d003      	beq.n	80009ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80009c2:	69ba      	ldr	r2, [r7, #24]
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80009ca:	4a1a      	ldr	r2, [pc, #104]	@ (8000a34 <HAL_GPIO_Init+0x304>)
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009d0:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <HAL_GPIO_Init+0x304>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	43db      	mvns	r3, r3
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	4013      	ands	r3, r2
 80009de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d003      	beq.n	80009f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009f4:	4a0f      	ldr	r2, [pc, #60]	@ (8000a34 <HAL_GPIO_Init+0x304>)
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3301      	adds	r3, #1
 80009fe:	61fb      	str	r3, [r7, #28]
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	2b0f      	cmp	r3, #15
 8000a04:	f67f aea2 	bls.w	800074c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000a08:	bf00      	nop
 8000a0a:	bf00      	nop
 8000a0c:	3724      	adds	r7, #36	@ 0x24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40013800 	.word	0x40013800
 8000a20:	40020000 	.word	0x40020000
 8000a24:	40020400 	.word	0x40020400
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	40020c00 	.word	0x40020c00
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40013c00 	.word	0x40013c00

08000a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	460b      	mov	r3, r1
 8000a42:	807b      	strh	r3, [r7, #2]
 8000a44:	4613      	mov	r3, r2
 8000a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a48:	787b      	ldrb	r3, [r7, #1]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d003      	beq.n	8000a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a4e:	887a      	ldrh	r2, [r7, #2]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000a54:	e003      	b.n	8000a5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a56:	887b      	ldrh	r3, [r7, #2]
 8000a58:	041a      	lsls	r2, r3, #16
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	619a      	str	r2, [r3, #24]
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <__NVIC_SetPriority>:
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	6039      	str	r1, [r7, #0]
 8000a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	db0a      	blt.n	8000a96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	490c      	ldr	r1, [pc, #48]	@ (8000ab8 <__NVIC_SetPriority+0x4c>)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	0112      	lsls	r2, r2, #4
 8000a8c:	b2d2      	uxtb	r2, r2
 8000a8e:	440b      	add	r3, r1
 8000a90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000a94:	e00a      	b.n	8000aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4908      	ldr	r1, [pc, #32]	@ (8000abc <__NVIC_SetPriority+0x50>)
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	f003 030f 	and.w	r3, r3, #15
 8000aa2:	3b04      	subs	r3, #4
 8000aa4:	0112      	lsls	r2, r2, #4
 8000aa6:	b2d2      	uxtb	r2, r2
 8000aa8:	440b      	add	r3, r1
 8000aaa:	761a      	strb	r2, [r3, #24]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000e100 	.word	0xe000e100
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	f06f 0004 	mvn.w	r0, #4
 8000aca:	f7ff ffcf 	bl	8000a6c <__NVIC_SetPriority>
#endif
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000ada:	f3ef 8305 	mrs	r3, IPSR
 8000ade:	603b      	str	r3, [r7, #0]
  return(result);
 8000ae0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d003      	beq.n	8000aee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8000ae6:	f06f 0305 	mvn.w	r3, #5
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	e00c      	b.n	8000b08 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8000aee:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <osKernelInitialize+0x44>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d105      	bne.n	8000b02 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8000af6:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <osKernelInitialize+0x44>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8000afc:	2300      	movs	r3, #0
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	e002      	b.n	8000b08 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8000b08:	687b      	ldr	r3, [r7, #4]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	2000003c 	.word	0x2000003c

08000b1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000b22:	f3ef 8305 	mrs	r3, IPSR
 8000b26:	603b      	str	r3, [r7, #0]
  return(result);
 8000b28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <osKernelStart+0x1a>
    stat = osErrorISR;
 8000b2e:	f06f 0305 	mvn.w	r3, #5
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	e010      	b.n	8000b58 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8000b36:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <osKernelStart+0x48>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d109      	bne.n	8000b52 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8000b3e:	f7ff ffbf 	bl	8000ac0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8000b42:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <osKernelStart+0x48>)
 8000b44:	2202      	movs	r2, #2
 8000b46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8000b48:	f001 f87a 	bl	8001c40 <vTaskStartScheduler>
      stat = osOK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	e002      	b.n	8000b58 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8000b58:	687b      	ldr	r3, [r7, #4]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	2000003c 	.word	0x2000003c

08000b68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08e      	sub	sp, #56	@ 0x38
 8000b6c:	af04      	add	r7, sp, #16
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000b78:	f3ef 8305 	mrs	r3, IPSR
 8000b7c:	617b      	str	r3, [r7, #20]
  return(result);
 8000b7e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d17e      	bne.n	8000c82 <osThreadNew+0x11a>
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d07b      	beq.n	8000c82 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8000b8a:	2380      	movs	r3, #128	@ 0x80
 8000b8c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8000b8e:	2318      	movs	r3, #24
 8000b90:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b9a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d045      	beq.n	8000c2e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d002      	beq.n	8000bb0 <osThreadNew+0x48>
        name = attr->name;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d002      	beq.n	8000bbe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d008      	beq.n	8000bd6 <osThreadNew+0x6e>
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	2b38      	cmp	r3, #56	@ 0x38
 8000bc8:	d805      	bhi.n	8000bd6 <osThreadNew+0x6e>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <osThreadNew+0x72>
        return (NULL);
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e054      	b.n	8000c84 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d003      	beq.n	8000bea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	089b      	lsrs	r3, r3, #2
 8000be8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d00e      	beq.n	8000c10 <osThreadNew+0xa8>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	2b5b      	cmp	r3, #91	@ 0x5b
 8000bf8:	d90a      	bls.n	8000c10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d006      	beq.n	8000c10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d002      	beq.n	8000c10 <osThreadNew+0xa8>
        mem = 1;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	61bb      	str	r3, [r7, #24]
 8000c0e:	e010      	b.n	8000c32 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d10c      	bne.n	8000c32 <osThreadNew+0xca>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d108      	bne.n	8000c32 <osThreadNew+0xca>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	691b      	ldr	r3, [r3, #16]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d104      	bne.n	8000c32 <osThreadNew+0xca>
          mem = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
 8000c2c:	e001      	b.n	8000c32 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d110      	bne.n	8000c5a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8000c40:	9202      	str	r2, [sp, #8]
 8000c42:	9301      	str	r3, [sp, #4]
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	6a3a      	ldr	r2, [r7, #32]
 8000c4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000c4e:	68f8      	ldr	r0, [r7, #12]
 8000c50:	f000 fe1a 	bl	8001888 <xTaskCreateStatic>
 8000c54:	4603      	mov	r3, r0
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	e013      	b.n	8000c82 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d110      	bne.n	8000c82 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8000c60:	6a3b      	ldr	r3, [r7, #32]
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	9301      	str	r3, [sp, #4]
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000c72:	68f8      	ldr	r0, [r7, #12]
 8000c74:	f000 fe68 	bl	8001948 <xTaskCreate>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d001      	beq.n	8000c82 <osThreadNew+0x11a>
            hTask = NULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8000c82:	693b      	ldr	r3, [r7, #16]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3728      	adds	r7, #40	@ 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000c94:	f3ef 8305 	mrs	r3, IPSR
 8000c98:	60bb      	str	r3, [r7, #8]
  return(result);
 8000c9a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d003      	beq.n	8000ca8 <osDelay+0x1c>
    stat = osErrorISR;
 8000ca0:	f06f 0305 	mvn.w	r3, #5
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	e007      	b.n	8000cb8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d002      	beq.n	8000cb8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f000 ff8e 	bl	8001bd4 <vTaskDelay>
    }
  }

  return (stat);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4a07      	ldr	r2, [pc, #28]	@ (8000cf0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000cd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	4a06      	ldr	r2, [pc, #24]	@ (8000cf4 <vApplicationGetIdleTaskMemory+0x30>)
 8000cda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2280      	movs	r2, #128	@ 0x80
 8000ce0:	601a      	str	r2, [r3, #0]
}
 8000ce2:	bf00      	nop
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000040 	.word	0x20000040
 8000cf4:	2000009c 	.word	0x2000009c

08000cf8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4a07      	ldr	r2, [pc, #28]	@ (8000d24 <vApplicationGetTimerTaskMemory+0x2c>)
 8000d08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	4a06      	ldr	r2, [pc, #24]	@ (8000d28 <vApplicationGetTimerTaskMemory+0x30>)
 8000d0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d16:	601a      	str	r2, [r3, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	2000029c 	.word	0x2000029c
 8000d28:	200002f8 	.word	0x200002f8

08000d2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f103 0208 	add.w	r2, r3, #8
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f103 0208 	add.w	r2, r3, #8
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f103 0208 	add.w	r2, r3, #8
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000d86:	b480      	push	{r7}
 8000d88:	b085      	sub	sp, #20
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
 8000d8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	68fa      	ldr	r2, [r7, #12]
 8000d9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	689a      	ldr	r2, [r3, #8]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	683a      	ldr	r2, [r7, #0]
 8000daa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	1c5a      	adds	r2, r3, #1
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	601a      	str	r2, [r3, #0]
}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b085      	sub	sp, #20
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000de4:	d103      	bne.n	8000dee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	691b      	ldr	r3, [r3, #16]
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	e00c      	b.n	8000e08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3308      	adds	r3, #8
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	e002      	b.n	8000dfc <vListInsert+0x2e>
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d2f6      	bcs.n	8000df6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	683a      	ldr	r2, [r7, #0]
 8000e22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	601a      	str	r2, [r3, #0]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	691b      	ldr	r3, [r3, #16]
 8000e4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	6892      	ldr	r2, [r2, #8]
 8000e56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	6852      	ldr	r2, [r2, #4]
 8000e60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d103      	bne.n	8000e74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	1e5a      	subs	r2, r3, #1
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10b      	bne.n	8000ec0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000eac:	f383 8811 	msr	BASEPRI, r3
 8000eb0:	f3bf 8f6f 	isb	sy
 8000eb4:	f3bf 8f4f 	dsb	sy
 8000eb8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000eba:	bf00      	nop
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8000ec0:	f002 f87a 	bl	8002fb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ecc:	68f9      	ldr	r1, [r7, #12]
 8000ece:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000ed0:	fb01 f303 	mul.w	r3, r1, r3
 8000ed4:	441a      	add	r2, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2200      	movs	r2, #0
 8000ede:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	68f9      	ldr	r1, [r7, #12]
 8000ef4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000ef6:	fb01 f303 	mul.w	r3, r1, r3
 8000efa:	441a      	add	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	22ff      	movs	r2, #255	@ 0xff
 8000f04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	22ff      	movs	r2, #255	@ 0xff
 8000f0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d114      	bne.n	8000f40 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d01a      	beq.n	8000f54 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	3310      	adds	r3, #16
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 f91a 	bl	800215c <xTaskRemoveFromEventList>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d012      	beq.n	8000f54 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f64 <xQueueGenericReset+0xd0>)
 8000f30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	f3bf 8f4f 	dsb	sy
 8000f3a:	f3bf 8f6f 	isb	sy
 8000f3e:	e009      	b.n	8000f54 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	3310      	adds	r3, #16
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fef1 	bl	8000d2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	3324      	adds	r3, #36	@ 0x24
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff feec 	bl	8000d2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000f54:	f002 f862 	bl	800301c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000f58:	2301      	movs	r3, #1
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	e000ed04 	.word	0xe000ed04

08000f68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08e      	sub	sp, #56	@ 0x38
 8000f6c:	af02      	add	r7, sp, #8
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10b      	bne.n	8000f94 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8000f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f80:	f383 8811 	msr	BASEPRI, r3
 8000f84:	f3bf 8f6f 	isb	sy
 8000f88:	f3bf 8f4f 	dsb	sy
 8000f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8000f8e:	bf00      	nop
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d10b      	bne.n	8000fb2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8000f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f9e:	f383 8811 	msr	BASEPRI, r3
 8000fa2:	f3bf 8f6f 	isb	sy
 8000fa6:	f3bf 8f4f 	dsb	sy
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	e7fd      	b.n	8000fae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d002      	beq.n	8000fbe <xQueueGenericCreateStatic+0x56>
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <xQueueGenericCreateStatic+0x5a>
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e000      	b.n	8000fc4 <xQueueGenericCreateStatic+0x5c>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d10b      	bne.n	8000fe0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8000fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fcc:	f383 8811 	msr	BASEPRI, r3
 8000fd0:	f3bf 8f6f 	isb	sy
 8000fd4:	f3bf 8f4f 	dsb	sy
 8000fd8:	623b      	str	r3, [r7, #32]
}
 8000fda:	bf00      	nop
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d102      	bne.n	8000fec <xQueueGenericCreateStatic+0x84>
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d101      	bne.n	8000ff0 <xQueueGenericCreateStatic+0x88>
 8000fec:	2301      	movs	r3, #1
 8000fee:	e000      	b.n	8000ff2 <xQueueGenericCreateStatic+0x8a>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10b      	bne.n	800100e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8000ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ffa:	f383 8811 	msr	BASEPRI, r3
 8000ffe:	f3bf 8f6f 	isb	sy
 8001002:	f3bf 8f4f 	dsb	sy
 8001006:	61fb      	str	r3, [r7, #28]
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	e7fd      	b.n	800100a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800100e:	2350      	movs	r3, #80	@ 0x50
 8001010:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	2b50      	cmp	r3, #80	@ 0x50
 8001016:	d00b      	beq.n	8001030 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800101c:	f383 8811 	msr	BASEPRI, r3
 8001020:	f3bf 8f6f 	isb	sy
 8001024:	f3bf 8f4f 	dsb	sy
 8001028:	61bb      	str	r3, [r7, #24]
}
 800102a:	bf00      	nop
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001030:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00d      	beq.n	8001058 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800103c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800103e:	2201      	movs	r2, #1
 8001040:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001044:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	4613      	mov	r3, r2
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f000 f805 	bl	8001062 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800105a:	4618      	mov	r0, r3
 800105c:	3730      	adds	r7, #48	@ 0x30
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b084      	sub	sp, #16
 8001066:	af00      	add	r7, sp, #0
 8001068:	60f8      	str	r0, [r7, #12]
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d103      	bne.n	800107e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	e002      	b.n	8001084 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001090:	2101      	movs	r1, #1
 8001092:	69b8      	ldr	r0, [r7, #24]
 8001094:	f7ff fefe 	bl	8000e94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	78fa      	ldrb	r2, [r7, #3]
 800109c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08e      	sub	sp, #56	@ 0x38
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80010b6:	2300      	movs	r3, #0
 80010b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80010be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d10b      	bne.n	80010dc <xQueueGenericSend+0x34>
	__asm volatile
 80010c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010c8:	f383 8811 	msr	BASEPRI, r3
 80010cc:	f3bf 8f6f 	isb	sy
 80010d0:	f3bf 8f4f 	dsb	sy
 80010d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80010d6:	bf00      	nop
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d103      	bne.n	80010ea <xQueueGenericSend+0x42>
 80010e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <xQueueGenericSend+0x46>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <xQueueGenericSend+0x48>
 80010ee:	2300      	movs	r3, #0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d10b      	bne.n	800110c <xQueueGenericSend+0x64>
	__asm volatile
 80010f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010f8:	f383 8811 	msr	BASEPRI, r3
 80010fc:	f3bf 8f6f 	isb	sy
 8001100:	f3bf 8f4f 	dsb	sy
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001106:	bf00      	nop
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d103      	bne.n	800111a <xQueueGenericSend+0x72>
 8001112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001116:	2b01      	cmp	r3, #1
 8001118:	d101      	bne.n	800111e <xQueueGenericSend+0x76>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <xQueueGenericSend+0x78>
 800111e:	2300      	movs	r3, #0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d10b      	bne.n	800113c <xQueueGenericSend+0x94>
	__asm volatile
 8001124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001128:	f383 8811 	msr	BASEPRI, r3
 800112c:	f3bf 8f6f 	isb	sy
 8001130:	f3bf 8f4f 	dsb	sy
 8001134:	623b      	str	r3, [r7, #32]
}
 8001136:	bf00      	nop
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800113c:	f001 f9ce 	bl	80024dc <xTaskGetSchedulerState>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d102      	bne.n	800114c <xQueueGenericSend+0xa4>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d101      	bne.n	8001150 <xQueueGenericSend+0xa8>
 800114c:	2301      	movs	r3, #1
 800114e:	e000      	b.n	8001152 <xQueueGenericSend+0xaa>
 8001150:	2300      	movs	r3, #0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10b      	bne.n	800116e <xQueueGenericSend+0xc6>
	__asm volatile
 8001156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800115a:	f383 8811 	msr	BASEPRI, r3
 800115e:	f3bf 8f6f 	isb	sy
 8001162:	f3bf 8f4f 	dsb	sy
 8001166:	61fb      	str	r3, [r7, #28]
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	e7fd      	b.n	800116a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800116e:	f001 ff23 	bl	8002fb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001174:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800117a:	429a      	cmp	r2, r3
 800117c:	d302      	bcc.n	8001184 <xQueueGenericSend+0xdc>
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d129      	bne.n	80011d8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	68b9      	ldr	r1, [r7, #8]
 8001188:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800118a:	f000 fa0f 	bl	80015ac <prvCopyDataToQueue>
 800118e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001194:	2b00      	cmp	r3, #0
 8001196:	d010      	beq.n	80011ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800119a:	3324      	adds	r3, #36	@ 0x24
 800119c:	4618      	mov	r0, r3
 800119e:	f000 ffdd 	bl	800215c <xTaskRemoveFromEventList>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d013      	beq.n	80011d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80011a8:	4b3f      	ldr	r3, [pc, #252]	@ (80012a8 <xQueueGenericSend+0x200>)
 80011aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	f3bf 8f4f 	dsb	sy
 80011b4:	f3bf 8f6f 	isb	sy
 80011b8:	e00a      	b.n	80011d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80011ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d007      	beq.n	80011d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80011c0:	4b39      	ldr	r3, [pc, #228]	@ (80012a8 <xQueueGenericSend+0x200>)
 80011c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	f3bf 8f4f 	dsb	sy
 80011cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80011d0:	f001 ff24 	bl	800301c <vPortExitCritical>
				return pdPASS;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e063      	b.n	80012a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d103      	bne.n	80011e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80011de:	f001 ff1d 	bl	800301c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e05c      	b.n	80012a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80011e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d106      	bne.n	80011fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 f817 	bl	8002224 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80011f6:	2301      	movs	r3, #1
 80011f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80011fa:	f001 ff0f 	bl	800301c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80011fe:	f000 fd87 	bl	8001d10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001202:	f001 fed9 	bl	8002fb8 <vPortEnterCritical>
 8001206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001208:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800120c:	b25b      	sxtb	r3, r3
 800120e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001212:	d103      	bne.n	800121c <xQueueGenericSend+0x174>
 8001214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800121c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800121e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001222:	b25b      	sxtb	r3, r3
 8001224:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001228:	d103      	bne.n	8001232 <xQueueGenericSend+0x18a>
 800122a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001232:	f001 fef3 	bl	800301c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001236:	1d3a      	adds	r2, r7, #4
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4611      	mov	r1, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f001 f806 	bl	8002250 <xTaskCheckForTimeOut>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d124      	bne.n	8001294 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800124a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800124c:	f000 faa6 	bl	800179c <prvIsQueueFull>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d018      	beq.n	8001288 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001258:	3310      	adds	r3, #16
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	4611      	mov	r1, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f000 ff2a 	bl	80020b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001264:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001266:	f000 fa31 	bl	80016cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800126a:	f000 fd5f 	bl	8001d2c <xTaskResumeAll>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	f47f af7c 	bne.w	800116e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8001276:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <xQueueGenericSend+0x200>)
 8001278:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	f3bf 8f4f 	dsb	sy
 8001282:	f3bf 8f6f 	isb	sy
 8001286:	e772      	b.n	800116e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001288:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800128a:	f000 fa1f 	bl	80016cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800128e:	f000 fd4d 	bl	8001d2c <xTaskResumeAll>
 8001292:	e76c      	b.n	800116e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001294:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001296:	f000 fa19 	bl	80016cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800129a:	f000 fd47 	bl	8001d2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800129e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3738      	adds	r7, #56	@ 0x38
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	e000ed04 	.word	0xe000ed04

080012ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b090      	sub	sp, #64	@ 0x40
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
 80012b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80012be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10b      	bne.n	80012dc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80012c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012c8:	f383 8811 	msr	BASEPRI, r3
 80012cc:	f3bf 8f6f 	isb	sy
 80012d0:	f3bf 8f4f 	dsb	sy
 80012d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80012d6:	bf00      	nop
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d103      	bne.n	80012ea <xQueueGenericSendFromISR+0x3e>
 80012e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <xQueueGenericSendFromISR+0x42>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <xQueueGenericSendFromISR+0x44>
 80012ee:	2300      	movs	r3, #0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d10b      	bne.n	800130c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80012f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012f8:	f383 8811 	msr	BASEPRI, r3
 80012fc:	f3bf 8f6f 	isb	sy
 8001300:	f3bf 8f4f 	dsb	sy
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001306:	bf00      	nop
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d103      	bne.n	800131a <xQueueGenericSendFromISR+0x6e>
 8001312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001316:	2b01      	cmp	r3, #1
 8001318:	d101      	bne.n	800131e <xQueueGenericSendFromISR+0x72>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <xQueueGenericSendFromISR+0x74>
 800131e:	2300      	movs	r3, #0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d10b      	bne.n	800133c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8001324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001328:	f383 8811 	msr	BASEPRI, r3
 800132c:	f3bf 8f6f 	isb	sy
 8001330:	f3bf 8f4f 	dsb	sy
 8001334:	623b      	str	r3, [r7, #32]
}
 8001336:	bf00      	nop
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800133c:	f001 ff1c 	bl	8003178 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001340:	f3ef 8211 	mrs	r2, BASEPRI
 8001344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001348:	f383 8811 	msr	BASEPRI, r3
 800134c:	f3bf 8f6f 	isb	sy
 8001350:	f3bf 8f4f 	dsb	sy
 8001354:	61fa      	str	r2, [r7, #28]
 8001356:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001358:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800135a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800135c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800135e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001364:	429a      	cmp	r2, r3
 8001366:	d302      	bcc.n	800136e <xQueueGenericSendFromISR+0xc2>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d12f      	bne.n	80013ce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800136e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001370:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001374:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800137a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800137c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001384:	f000 f912 	bl	80015ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001388:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800138c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001390:	d112      	bne.n	80013b8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001396:	2b00      	cmp	r3, #0
 8001398:	d016      	beq.n	80013c8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800139a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800139c:	3324      	adds	r3, #36	@ 0x24
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fedc 	bl	800215c <xTaskRemoveFromEventList>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00e      	beq.n	80013c8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00b      	beq.n	80013c8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	e007      	b.n	80013c8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80013b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013bc:	3301      	adds	r3, #1
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	b25a      	sxtb	r2, r3
 80013c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80013c8:	2301      	movs	r3, #1
 80013ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80013cc:	e001      	b.n	80013d2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013d4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80013dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80013de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3740      	adds	r7, #64	@ 0x40
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08c      	sub	sp, #48	@ 0x30
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80013fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10b      	bne.n	800141a <xQueueReceive+0x32>
	__asm volatile
 8001402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001406:	f383 8811 	msr	BASEPRI, r3
 800140a:	f3bf 8f6f 	isb	sy
 800140e:	f3bf 8f4f 	dsb	sy
 8001412:	623b      	str	r3, [r7, #32]
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	e7fd      	b.n	8001416 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d103      	bne.n	8001428 <xQueueReceive+0x40>
 8001420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <xQueueReceive+0x44>
 8001428:	2301      	movs	r3, #1
 800142a:	e000      	b.n	800142e <xQueueReceive+0x46>
 800142c:	2300      	movs	r3, #0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d10b      	bne.n	800144a <xQueueReceive+0x62>
	__asm volatile
 8001432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001436:	f383 8811 	msr	BASEPRI, r3
 800143a:	f3bf 8f6f 	isb	sy
 800143e:	f3bf 8f4f 	dsb	sy
 8001442:	61fb      	str	r3, [r7, #28]
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	e7fd      	b.n	8001446 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800144a:	f001 f847 	bl	80024dc <xTaskGetSchedulerState>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d102      	bne.n	800145a <xQueueReceive+0x72>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <xQueueReceive+0x76>
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <xQueueReceive+0x78>
 800145e:	2300      	movs	r3, #0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10b      	bne.n	800147c <xQueueReceive+0x94>
	__asm volatile
 8001464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001468:	f383 8811 	msr	BASEPRI, r3
 800146c:	f3bf 8f6f 	isb	sy
 8001470:	f3bf 8f4f 	dsb	sy
 8001474:	61bb      	str	r3, [r7, #24]
}
 8001476:	bf00      	nop
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800147c:	f001 fd9c 	bl	8002fb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001488:	2b00      	cmp	r3, #0
 800148a:	d01f      	beq.n	80014cc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800148c:	68b9      	ldr	r1, [r7, #8]
 800148e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001490:	f000 f8f6 	bl	8001680 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001496:	1e5a      	subs	r2, r3, #1
 8001498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800149a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800149c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00f      	beq.n	80014c4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80014a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014a6:	3310      	adds	r3, #16
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 fe57 	bl	800215c <xTaskRemoveFromEventList>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d007      	beq.n	80014c4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80014b4:	4b3c      	ldr	r3, [pc, #240]	@ (80015a8 <xQueueReceive+0x1c0>)
 80014b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	f3bf 8f4f 	dsb	sy
 80014c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80014c4:	f001 fdaa 	bl	800301c <vPortExitCritical>
				return pdPASS;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e069      	b.n	80015a0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d103      	bne.n	80014da <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80014d2:	f001 fda3 	bl	800301c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80014d6:	2300      	movs	r3, #0
 80014d8:	e062      	b.n	80015a0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80014da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d106      	bne.n	80014ee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80014e0:	f107 0310 	add.w	r3, r7, #16
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 fe9d 	bl	8002224 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80014ea:	2301      	movs	r3, #1
 80014ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80014ee:	f001 fd95 	bl	800301c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80014f2:	f000 fc0d 	bl	8001d10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80014f6:	f001 fd5f 	bl	8002fb8 <vPortEnterCritical>
 80014fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001500:	b25b      	sxtb	r3, r3
 8001502:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001506:	d103      	bne.n	8001510 <xQueueReceive+0x128>
 8001508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001512:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001516:	b25b      	sxtb	r3, r3
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800151c:	d103      	bne.n	8001526 <xQueueReceive+0x13e>
 800151e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001526:	f001 fd79 	bl	800301c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800152a:	1d3a      	adds	r2, r7, #4
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	4611      	mov	r1, r2
 8001532:	4618      	mov	r0, r3
 8001534:	f000 fe8c 	bl	8002250 <xTaskCheckForTimeOut>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d123      	bne.n	8001586 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800153e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001540:	f000 f916 	bl	8001770 <prvIsQueueEmpty>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d017      	beq.n	800157a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800154a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800154c:	3324      	adds	r3, #36	@ 0x24
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f000 fdb0 	bl	80020b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001558:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800155a:	f000 f8b7 	bl	80016cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800155e:	f000 fbe5 	bl	8001d2c <xTaskResumeAll>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d189      	bne.n	800147c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8001568:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <xQueueReceive+0x1c0>)
 800156a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	f3bf 8f4f 	dsb	sy
 8001574:	f3bf 8f6f 	isb	sy
 8001578:	e780      	b.n	800147c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800157a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800157c:	f000 f8a6 	bl	80016cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001580:	f000 fbd4 	bl	8001d2c <xTaskResumeAll>
 8001584:	e77a      	b.n	800147c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001586:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001588:	f000 f8a0 	bl	80016cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800158c:	f000 fbce 	bl	8001d2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001590:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001592:	f000 f8ed 	bl	8001770 <prvIsQueueEmpty>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	f43f af6f 	beq.w	800147c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800159e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3730      	adds	r7, #48	@ 0x30
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	e000ed04 	.word	0xe000ed04

080015ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10d      	bne.n	80015e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d14d      	bne.n	800166e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 ff9e 	bl	8002518 <xTaskPriorityDisinherit>
 80015dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	e043      	b.n	800166e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d119      	bne.n	8001620 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6858      	ldr	r0, [r3, #4]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f4:	461a      	mov	r2, r3
 80015f6:	68b9      	ldr	r1, [r7, #8]
 80015f8:	f002 f81a 	bl	8003630 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001604:	441a      	add	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	429a      	cmp	r2, r3
 8001614:	d32b      	bcc.n	800166e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	e026      	b.n	800166e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	68d8      	ldr	r0, [r3, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001628:	461a      	mov	r2, r3
 800162a:	68b9      	ldr	r1, [r7, #8]
 800162c:	f002 f800 	bl	8003630 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001638:	425b      	negs	r3, r3
 800163a:	441a      	add	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	68da      	ldr	r2, [r3, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	d207      	bcs.n	800165c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001654:	425b      	negs	r3, r3
 8001656:	441a      	add	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d105      	bne.n	800166e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	3b01      	subs	r3, #1
 800166c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8001676:	697b      	ldr	r3, [r7, #20]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168e:	2b00      	cmp	r3, #0
 8001690:	d018      	beq.n	80016c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169a:	441a      	add	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d303      	bcc.n	80016b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68d9      	ldr	r1, [r3, #12]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016bc:	461a      	mov	r2, r3
 80016be:	6838      	ldr	r0, [r7, #0]
 80016c0:	f001 ffb6 	bl	8003630 <memcpy>
	}
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80016d4:	f001 fc70 	bl	8002fb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80016de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80016e0:	e011      	b.n	8001706 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d012      	beq.n	8001710 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3324      	adds	r3, #36	@ 0x24
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 fd34 	bl	800215c <xTaskRemoveFromEventList>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80016fa:	f000 fe0d 	bl	8002318 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	3b01      	subs	r3, #1
 8001702:	b2db      	uxtb	r3, r3
 8001704:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170a:	2b00      	cmp	r3, #0
 800170c:	dce9      	bgt.n	80016e2 <prvUnlockQueue+0x16>
 800170e:	e000      	b.n	8001712 <prvUnlockQueue+0x46>
					break;
 8001710:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	22ff      	movs	r2, #255	@ 0xff
 8001716:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800171a:	f001 fc7f 	bl	800301c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800171e:	f001 fc4b 	bl	8002fb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001728:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800172a:	e011      	b.n	8001750 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d012      	beq.n	800175a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3310      	adds	r3, #16
 8001738:	4618      	mov	r0, r3
 800173a:	f000 fd0f 	bl	800215c <xTaskRemoveFromEventList>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001744:	f000 fde8 	bl	8002318 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001748:	7bbb      	ldrb	r3, [r7, #14]
 800174a:	3b01      	subs	r3, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001750:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001754:	2b00      	cmp	r3, #0
 8001756:	dce9      	bgt.n	800172c <prvUnlockQueue+0x60>
 8001758:	e000      	b.n	800175c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800175a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	22ff      	movs	r2, #255	@ 0xff
 8001760:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8001764:	f001 fc5a 	bl	800301c <vPortExitCritical>
}
 8001768:	bf00      	nop
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001778:	f001 fc1e 	bl	8002fb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001784:	2301      	movs	r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	e001      	b.n	800178e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800178e:	f001 fc45 	bl	800301c <vPortExitCritical>

	return xReturn;
 8001792:	68fb      	ldr	r3, [r7, #12]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80017a4:	f001 fc08 	bl	8002fb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d102      	bne.n	80017ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80017b4:	2301      	movs	r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	e001      	b.n	80017be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80017be:	f001 fc2d 	bl	800301c <vPortExitCritical>

	return xReturn;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	e014      	b.n	8001806 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80017dc:	4a0f      	ldr	r2, [pc, #60]	@ (800181c <vQueueAddToRegistry+0x50>)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d10b      	bne.n	8001800 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80017e8:	490c      	ldr	r1, [pc, #48]	@ (800181c <vQueueAddToRegistry+0x50>)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80017f2:	4a0a      	ldr	r2, [pc, #40]	@ (800181c <vQueueAddToRegistry+0x50>)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4413      	add	r3, r2
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80017fe:	e006      	b.n	800180e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	3301      	adds	r3, #1
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2b07      	cmp	r3, #7
 800180a:	d9e7      	bls.n	80017dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	200006f8 	.word	0x200006f8

08001820 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001830:	f001 fbc2 	bl	8002fb8 <vPortEnterCritical>
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800183a:	b25b      	sxtb	r3, r3
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001840:	d103      	bne.n	800184a <vQueueWaitForMessageRestricted+0x2a>
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001850:	b25b      	sxtb	r3, r3
 8001852:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001856:	d103      	bne.n	8001860 <vQueueWaitForMessageRestricted+0x40>
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001860:	f001 fbdc 	bl	800301c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001868:	2b00      	cmp	r3, #0
 800186a:	d106      	bne.n	800187a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	3324      	adds	r3, #36	@ 0x24
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	68b9      	ldr	r1, [r7, #8]
 8001874:	4618      	mov	r0, r3
 8001876:	f000 fc45 	bl	8002104 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800187a:	6978      	ldr	r0, [r7, #20]
 800187c:	f7ff ff26 	bl	80016cc <prvUnlockQueue>
	}
 8001880:	bf00      	nop
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08e      	sub	sp, #56	@ 0x38
 800188c:	af04      	add	r7, sp, #16
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10b      	bne.n	80018b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800189c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018a0:	f383 8811 	msr	BASEPRI, r3
 80018a4:	f3bf 8f6f 	isb	sy
 80018a8:	f3bf 8f4f 	dsb	sy
 80018ac:	623b      	str	r3, [r7, #32]
}
 80018ae:	bf00      	nop
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80018b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10b      	bne.n	80018d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80018ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018be:	f383 8811 	msr	BASEPRI, r3
 80018c2:	f3bf 8f6f 	isb	sy
 80018c6:	f3bf 8f4f 	dsb	sy
 80018ca:	61fb      	str	r3, [r7, #28]
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	e7fd      	b.n	80018ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80018d2:	235c      	movs	r3, #92	@ 0x5c
 80018d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	2b5c      	cmp	r3, #92	@ 0x5c
 80018da:	d00b      	beq.n	80018f4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80018dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018e0:	f383 8811 	msr	BASEPRI, r3
 80018e4:	f3bf 8f6f 	isb	sy
 80018e8:	f3bf 8f4f 	dsb	sy
 80018ec:	61bb      	str	r3, [r7, #24]
}
 80018ee:	bf00      	nop
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80018f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80018f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d01e      	beq.n	800193a <xTaskCreateStatic+0xb2>
 80018fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d01b      	beq.n	800193a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001904:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800190a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190e:	2202      	movs	r2, #2
 8001910:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001914:	2300      	movs	r3, #0
 8001916:	9303      	str	r3, [sp, #12]
 8001918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	9301      	str	r3, [sp, #4]
 8001922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	68b9      	ldr	r1, [r7, #8]
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f000 f850 	bl	80019d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001932:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001934:	f000 f8de 	bl	8001af4 <prvAddNewTaskToReadyList>
 8001938:	e001      	b.n	800193e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800193e:	697b      	ldr	r3, [r7, #20]
	}
 8001940:	4618      	mov	r0, r3
 8001942:	3728      	adds	r7, #40	@ 0x28
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08c      	sub	sp, #48	@ 0x30
 800194c:	af04      	add	r7, sp, #16
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	4613      	mov	r3, r2
 8001956:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001958:	88fb      	ldrh	r3, [r7, #6]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4618      	mov	r0, r3
 800195e:	f001 fc4d 	bl	80031fc <pvPortMalloc>
 8001962:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00e      	beq.n	8001988 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800196a:	205c      	movs	r0, #92	@ 0x5c
 800196c:	f001 fc46 	bl	80031fc <pvPortMalloc>
 8001970:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	631a      	str	r2, [r3, #48]	@ 0x30
 800197e:	e005      	b.n	800198c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001980:	6978      	ldr	r0, [r7, #20]
 8001982:	f001 fd09 	bl	8003398 <vPortFree>
 8001986:	e001      	b.n	800198c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d017      	beq.n	80019c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800199a:	88fa      	ldrh	r2, [r7, #6]
 800199c:	2300      	movs	r3, #0
 800199e:	9303      	str	r3, [sp, #12]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	9302      	str	r3, [sp, #8]
 80019a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	68b9      	ldr	r1, [r7, #8]
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f000 f80e 	bl	80019d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80019b6:	69f8      	ldr	r0, [r7, #28]
 80019b8:	f000 f89c 	bl	8001af4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80019bc:	2301      	movs	r3, #1
 80019be:	61bb      	str	r3, [r7, #24]
 80019c0:	e002      	b.n	80019c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80019c8:	69bb      	ldr	r3, [r7, #24]
	}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3720      	adds	r7, #32
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b088      	sub	sp, #32
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80019e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019e2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	461a      	mov	r2, r3
 80019ea:	21a5      	movs	r1, #165	@ 0xa5
 80019ec:	f001 fdf4 	bl	80035d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80019f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80019fa:	3b01      	subs	r3, #1
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	f023 0307 	bic.w	r3, r3, #7
 8001a08:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00b      	beq.n	8001a2c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8001a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a18:	f383 8811 	msr	BASEPRI, r3
 8001a1c:	f3bf 8f6f 	isb	sy
 8001a20:	f3bf 8f4f 	dsb	sy
 8001a24:	617b      	str	r3, [r7, #20]
}
 8001a26:	bf00      	nop
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d01f      	beq.n	8001a72 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	e012      	b.n	8001a5e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	7819      	ldrb	r1, [r3, #0]
 8001a40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	4413      	add	r3, r2
 8001a46:	3334      	adds	r3, #52	@ 0x34
 8001a48:	460a      	mov	r2, r1
 8001a4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	4413      	add	r3, r2
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d006      	beq.n	8001a66 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	2b0f      	cmp	r3, #15
 8001a62:	d9e9      	bls.n	8001a38 <prvInitialiseNewTask+0x66>
 8001a64:	e000      	b.n	8001a68 <prvInitialiseNewTask+0x96>
			{
				break;
 8001a66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a70:	e003      	b.n	8001a7a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a7c:	2b37      	cmp	r3, #55	@ 0x37
 8001a7e:	d901      	bls.n	8001a84 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001a80:	2337      	movs	r3, #55	@ 0x37
 8001a82:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a88:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a8e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8001a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a92:	2200      	movs	r2, #0
 8001a94:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a98:	3304      	adds	r3, #4
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff f966 	bl	8000d6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aa2:	3318      	adds	r3, #24
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff f961 	bl	8000d6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001aae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ab2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8001ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ab8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001abc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001abe:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	68f9      	ldr	r1, [r7, #12]
 8001ad2:	69b8      	ldr	r0, [r7, #24]
 8001ad4:	f001 f93e 	bl	8002d54 <pxPortInitialiseStack>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001adc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ae8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001aea:	bf00      	nop
 8001aec:	3720      	adds	r7, #32
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001afc:	f001 fa5c 	bl	8002fb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001b00:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb8 <prvAddNewTaskToReadyList+0xc4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	3301      	adds	r3, #1
 8001b06:	4a2c      	ldr	r2, [pc, #176]	@ (8001bb8 <prvAddNewTaskToReadyList+0xc4>)
 8001b08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001bbc <prvAddNewTaskToReadyList+0xc8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d109      	bne.n	8001b26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001b12:	4a2a      	ldr	r2, [pc, #168]	@ (8001bbc <prvAddNewTaskToReadyList+0xc8>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001b18:	4b27      	ldr	r3, [pc, #156]	@ (8001bb8 <prvAddNewTaskToReadyList+0xc4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d110      	bne.n	8001b42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001b20:	f000 fc1e 	bl	8002360 <prvInitialiseTaskLists>
 8001b24:	e00d      	b.n	8001b42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001b26:	4b26      	ldr	r3, [pc, #152]	@ (8001bc0 <prvAddNewTaskToReadyList+0xcc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001b2e:	4b23      	ldr	r3, [pc, #140]	@ (8001bbc <prvAddNewTaskToReadyList+0xc8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d802      	bhi.n	8001b42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8001bbc <prvAddNewTaskToReadyList+0xc8>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001b42:	4b20      	ldr	r3, [pc, #128]	@ (8001bc4 <prvAddNewTaskToReadyList+0xd0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	3301      	adds	r3, #1
 8001b48:	4a1e      	ldr	r2, [pc, #120]	@ (8001bc4 <prvAddNewTaskToReadyList+0xd0>)
 8001b4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc4 <prvAddNewTaskToReadyList+0xd0>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b58:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc8 <prvAddNewTaskToReadyList+0xd4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d903      	bls.n	8001b68 <prvAddNewTaskToReadyList+0x74>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b64:	4a18      	ldr	r2, [pc, #96]	@ (8001bc8 <prvAddNewTaskToReadyList+0xd4>)
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4a15      	ldr	r2, [pc, #84]	@ (8001bcc <prvAddNewTaskToReadyList+0xd8>)
 8001b76:	441a      	add	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4610      	mov	r0, r2
 8001b80:	f7ff f901 	bl	8000d86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001b84:	f001 fa4a 	bl	800301c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001b88:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc0 <prvAddNewTaskToReadyList+0xcc>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00e      	beq.n	8001bae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001b90:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <prvAddNewTaskToReadyList+0xc8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d207      	bcs.n	8001bae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd0 <prvAddNewTaskToReadyList+0xdc>)
 8001ba0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	f3bf 8f4f 	dsb	sy
 8001baa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000c0c 	.word	0x20000c0c
 8001bbc:	20000738 	.word	0x20000738
 8001bc0:	20000c18 	.word	0x20000c18
 8001bc4:	20000c28 	.word	0x20000c28
 8001bc8:	20000c14 	.word	0x20000c14
 8001bcc:	2000073c 	.word	0x2000073c
 8001bd0:	e000ed04 	.word	0xe000ed04

08001bd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d018      	beq.n	8001c18 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001be6:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <vTaskDelay+0x64>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00b      	beq.n	8001c06 <vTaskDelay+0x32>
	__asm volatile
 8001bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bf2:	f383 8811 	msr	BASEPRI, r3
 8001bf6:	f3bf 8f6f 	isb	sy
 8001bfa:	f3bf 8f4f 	dsb	sy
 8001bfe:	60bb      	str	r3, [r7, #8]
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	e7fd      	b.n	8001c02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001c06:	f000 f883 	bl	8001d10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 fcf3 	bl	80025f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001c12:	f000 f88b 	bl	8001d2c <xTaskResumeAll>
 8001c16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d107      	bne.n	8001c2e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8001c1e:	4b07      	ldr	r3, [pc, #28]	@ (8001c3c <vTaskDelay+0x68>)
 8001c20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	f3bf 8f4f 	dsb	sy
 8001c2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000c34 	.word	0x20000c34
 8001c3c:	e000ed04 	.word	0xe000ed04

08001c40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	@ 0x28
 8001c44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001c4e:	463a      	mov	r2, r7
 8001c50:	1d39      	adds	r1, r7, #4
 8001c52:	f107 0308 	add.w	r3, r7, #8
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff f834 	bl	8000cc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001c5c:	6839      	ldr	r1, [r7, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	9202      	str	r2, [sp, #8]
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	2300      	movs	r3, #0
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	460a      	mov	r2, r1
 8001c6e:	4922      	ldr	r1, [pc, #136]	@ (8001cf8 <vTaskStartScheduler+0xb8>)
 8001c70:	4822      	ldr	r0, [pc, #136]	@ (8001cfc <vTaskStartScheduler+0xbc>)
 8001c72:	f7ff fe09 	bl	8001888 <xTaskCreateStatic>
 8001c76:	4603      	mov	r3, r0
 8001c78:	4a21      	ldr	r2, [pc, #132]	@ (8001d00 <vTaskStartScheduler+0xc0>)
 8001c7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001c7c:	4b20      	ldr	r3, [pc, #128]	@ (8001d00 <vTaskStartScheduler+0xc0>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d002      	beq.n	8001c8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001c84:	2301      	movs	r3, #1
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	e001      	b.n	8001c8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d102      	bne.n	8001c9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8001c94:	f000 fd04 	bl	80026a0 <xTimerCreateTimerTask>
 8001c98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d116      	bne.n	8001cce <vTaskStartScheduler+0x8e>
	__asm volatile
 8001ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ca4:	f383 8811 	msr	BASEPRI, r3
 8001ca8:	f3bf 8f6f 	isb	sy
 8001cac:	f3bf 8f4f 	dsb	sy
 8001cb0:	613b      	str	r3, [r7, #16]
}
 8001cb2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001cb4:	4b13      	ldr	r3, [pc, #76]	@ (8001d04 <vTaskStartScheduler+0xc4>)
 8001cb6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001cbc:	4b12      	ldr	r3, [pc, #72]	@ (8001d08 <vTaskStartScheduler+0xc8>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001cc2:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <vTaskStartScheduler+0xcc>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001cc8:	f001 f8d2 	bl	8002e70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001ccc:	e00f      	b.n	8001cee <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001cd4:	d10b      	bne.n	8001cee <vTaskStartScheduler+0xae>
	__asm volatile
 8001cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cda:	f383 8811 	msr	BASEPRI, r3
 8001cde:	f3bf 8f6f 	isb	sy
 8001ce2:	f3bf 8f4f 	dsb	sy
 8001ce6:	60fb      	str	r3, [r7, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	e7fd      	b.n	8001cea <vTaskStartScheduler+0xaa>
}
 8001cee:	bf00      	nop
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	08003688 	.word	0x08003688
 8001cfc:	08002331 	.word	0x08002331
 8001d00:	20000c30 	.word	0x20000c30
 8001d04:	20000c2c 	.word	0x20000c2c
 8001d08:	20000c18 	.word	0x20000c18
 8001d0c:	20000c10 	.word	0x20000c10

08001d10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001d14:	4b04      	ldr	r3, [pc, #16]	@ (8001d28 <vTaskSuspendAll+0x18>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	4a03      	ldr	r2, [pc, #12]	@ (8001d28 <vTaskSuspendAll+0x18>)
 8001d1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	20000c34 	.word	0x20000c34

08001d2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001d3a:	4b42      	ldr	r3, [pc, #264]	@ (8001e44 <xTaskResumeAll+0x118>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10b      	bne.n	8001d5a <xTaskResumeAll+0x2e>
	__asm volatile
 8001d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d46:	f383 8811 	msr	BASEPRI, r3
 8001d4a:	f3bf 8f6f 	isb	sy
 8001d4e:	f3bf 8f4f 	dsb	sy
 8001d52:	603b      	str	r3, [r7, #0]
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	e7fd      	b.n	8001d56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001d5a:	f001 f92d 	bl	8002fb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001d5e:	4b39      	ldr	r3, [pc, #228]	@ (8001e44 <xTaskResumeAll+0x118>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	4a37      	ldr	r2, [pc, #220]	@ (8001e44 <xTaskResumeAll+0x118>)
 8001d66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d68:	4b36      	ldr	r3, [pc, #216]	@ (8001e44 <xTaskResumeAll+0x118>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d162      	bne.n	8001e36 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001d70:	4b35      	ldr	r3, [pc, #212]	@ (8001e48 <xTaskResumeAll+0x11c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d05e      	beq.n	8001e36 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d78:	e02f      	b.n	8001dda <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d7a:	4b34      	ldr	r3, [pc, #208]	@ (8001e4c <xTaskResumeAll+0x120>)
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	3318      	adds	r3, #24
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff f85a 	bl	8000e40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	3304      	adds	r3, #4
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff f855 	bl	8000e40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d9a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e50 <xTaskResumeAll+0x124>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d903      	bls.n	8001daa <xTaskResumeAll+0x7e>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da6:	4a2a      	ldr	r2, [pc, #168]	@ (8001e50 <xTaskResumeAll+0x124>)
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4a27      	ldr	r2, [pc, #156]	@ (8001e54 <xTaskResumeAll+0x128>)
 8001db8:	441a      	add	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	f7fe ffe0 	bl	8000d86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dca:	4b23      	ldr	r3, [pc, #140]	@ (8001e58 <xTaskResumeAll+0x12c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d302      	bcc.n	8001dda <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8001dd4:	4b21      	ldr	r3, [pc, #132]	@ (8001e5c <xTaskResumeAll+0x130>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001dda:	4b1c      	ldr	r3, [pc, #112]	@ (8001e4c <xTaskResumeAll+0x120>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1cb      	bne.n	8001d7a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001de8:	f000 fb58 	bl	800249c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001dec:	4b1c      	ldr	r3, [pc, #112]	@ (8001e60 <xTaskResumeAll+0x134>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d010      	beq.n	8001e1a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001df8:	f000 f846 	bl	8001e88 <xTaskIncrementTick>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8001e02:	4b16      	ldr	r3, [pc, #88]	@ (8001e5c <xTaskResumeAll+0x130>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1f1      	bne.n	8001df8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8001e14:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <xTaskResumeAll+0x134>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001e1a:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <xTaskResumeAll+0x130>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001e22:	2301      	movs	r3, #1
 8001e24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001e26:	4b0f      	ldr	r3, [pc, #60]	@ (8001e64 <xTaskResumeAll+0x138>)
 8001e28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	f3bf 8f4f 	dsb	sy
 8001e32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001e36:	f001 f8f1 	bl	800301c <vPortExitCritical>

	return xAlreadyYielded;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000c34 	.word	0x20000c34
 8001e48:	20000c0c 	.word	0x20000c0c
 8001e4c:	20000bcc 	.word	0x20000bcc
 8001e50:	20000c14 	.word	0x20000c14
 8001e54:	2000073c 	.word	0x2000073c
 8001e58:	20000738 	.word	0x20000738
 8001e5c:	20000c20 	.word	0x20000c20
 8001e60:	20000c1c 	.word	0x20000c1c
 8001e64:	e000ed04 	.word	0xe000ed04

08001e68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001e6e:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <xTaskGetTickCount+0x1c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001e74:	687b      	ldr	r3, [r7, #4]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000c10 	.word	0x20000c10

08001e88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e92:	4b4f      	ldr	r3, [pc, #316]	@ (8001fd0 <xTaskIncrementTick+0x148>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f040 8090 	bne.w	8001fbc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001e9c:	4b4d      	ldr	r3, [pc, #308]	@ (8001fd4 <xTaskIncrementTick+0x14c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001ea4:	4a4b      	ldr	r2, [pc, #300]	@ (8001fd4 <xTaskIncrementTick+0x14c>)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d121      	bne.n	8001ef4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8001eb0:	4b49      	ldr	r3, [pc, #292]	@ (8001fd8 <xTaskIncrementTick+0x150>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00b      	beq.n	8001ed2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8001eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ebe:	f383 8811 	msr	BASEPRI, r3
 8001ec2:	f3bf 8f6f 	isb	sy
 8001ec6:	f3bf 8f4f 	dsb	sy
 8001eca:	603b      	str	r3, [r7, #0]
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	e7fd      	b.n	8001ece <xTaskIncrementTick+0x46>
 8001ed2:	4b41      	ldr	r3, [pc, #260]	@ (8001fd8 <xTaskIncrementTick+0x150>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	4b40      	ldr	r3, [pc, #256]	@ (8001fdc <xTaskIncrementTick+0x154>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a3e      	ldr	r2, [pc, #248]	@ (8001fd8 <xTaskIncrementTick+0x150>)
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4a3e      	ldr	r2, [pc, #248]	@ (8001fdc <xTaskIncrementTick+0x154>)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4b3e      	ldr	r3, [pc, #248]	@ (8001fe0 <xTaskIncrementTick+0x158>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	3301      	adds	r3, #1
 8001eec:	4a3c      	ldr	r2, [pc, #240]	@ (8001fe0 <xTaskIncrementTick+0x158>)
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	f000 fad4 	bl	800249c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001ef4:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe4 <xTaskIncrementTick+0x15c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d349      	bcc.n	8001f92 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001efe:	4b36      	ldr	r3, [pc, #216]	@ (8001fd8 <xTaskIncrementTick+0x150>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d104      	bne.n	8001f12 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f08:	4b36      	ldr	r3, [pc, #216]	@ (8001fe4 <xTaskIncrementTick+0x15c>)
 8001f0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f0e:	601a      	str	r2, [r3, #0]
					break;
 8001f10:	e03f      	b.n	8001f92 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f12:	4b31      	ldr	r3, [pc, #196]	@ (8001fd8 <xTaskIncrementTick+0x150>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d203      	bcs.n	8001f32 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001f2a:	4a2e      	ldr	r2, [pc, #184]	@ (8001fe4 <xTaskIncrementTick+0x15c>)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001f30:	e02f      	b.n	8001f92 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	3304      	adds	r3, #4
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe ff82 	bl	8000e40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d004      	beq.n	8001f4e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	3318      	adds	r3, #24
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe ff79 	bl	8000e40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f52:	4b25      	ldr	r3, [pc, #148]	@ (8001fe8 <xTaskIncrementTick+0x160>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d903      	bls.n	8001f62 <xTaskIncrementTick+0xda>
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5e:	4a22      	ldr	r2, [pc, #136]	@ (8001fe8 <xTaskIncrementTick+0x160>)
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4a1f      	ldr	r2, [pc, #124]	@ (8001fec <xTaskIncrementTick+0x164>)
 8001f70:	441a      	add	r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	3304      	adds	r3, #4
 8001f76:	4619      	mov	r1, r3
 8001f78:	4610      	mov	r0, r2
 8001f7a:	f7fe ff04 	bl	8000d86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f82:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff0 <xTaskIncrementTick+0x168>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d3b8      	bcc.n	8001efe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f90:	e7b5      	b.n	8001efe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001f92:	4b17      	ldr	r3, [pc, #92]	@ (8001ff0 <xTaskIncrementTick+0x168>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f98:	4914      	ldr	r1, [pc, #80]	@ (8001fec <xTaskIncrementTick+0x164>)
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	4413      	add	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d901      	bls.n	8001fae <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8001faa:	2301      	movs	r3, #1
 8001fac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001fae:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <xTaskIncrementTick+0x16c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d007      	beq.n	8001fc6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	e004      	b.n	8001fc6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff8 <xTaskIncrementTick+0x170>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	4a0d      	ldr	r2, [pc, #52]	@ (8001ff8 <xTaskIncrementTick+0x170>)
 8001fc4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001fc6:	697b      	ldr	r3, [r7, #20]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000c34 	.word	0x20000c34
 8001fd4:	20000c10 	.word	0x20000c10
 8001fd8:	20000bc4 	.word	0x20000bc4
 8001fdc:	20000bc8 	.word	0x20000bc8
 8001fe0:	20000c24 	.word	0x20000c24
 8001fe4:	20000c2c 	.word	0x20000c2c
 8001fe8:	20000c14 	.word	0x20000c14
 8001fec:	2000073c 	.word	0x2000073c
 8001ff0:	20000738 	.word	0x20000738
 8001ff4:	20000c20 	.word	0x20000c20
 8001ff8:	20000c1c 	.word	0x20000c1c

08001ffc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002002:	4b28      	ldr	r3, [pc, #160]	@ (80020a4 <vTaskSwitchContext+0xa8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800200a:	4b27      	ldr	r3, [pc, #156]	@ (80020a8 <vTaskSwitchContext+0xac>)
 800200c:	2201      	movs	r2, #1
 800200e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002010:	e042      	b.n	8002098 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8002012:	4b25      	ldr	r3, [pc, #148]	@ (80020a8 <vTaskSwitchContext+0xac>)
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002018:	4b24      	ldr	r3, [pc, #144]	@ (80020ac <vTaskSwitchContext+0xb0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	e011      	b.n	8002044 <vTaskSwitchContext+0x48>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10b      	bne.n	800203e <vTaskSwitchContext+0x42>
	__asm volatile
 8002026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800202a:	f383 8811 	msr	BASEPRI, r3
 800202e:	f3bf 8f6f 	isb	sy
 8002032:	f3bf 8f4f 	dsb	sy
 8002036:	607b      	str	r3, [r7, #4]
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	e7fd      	b.n	800203a <vTaskSwitchContext+0x3e>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3b01      	subs	r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	491a      	ldr	r1, [pc, #104]	@ (80020b0 <vTaskSwitchContext+0xb4>)
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0e3      	beq.n	8002020 <vTaskSwitchContext+0x24>
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4a13      	ldr	r2, [pc, #76]	@ (80020b0 <vTaskSwitchContext+0xb4>)
 8002064:	4413      	add	r3, r2
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	3308      	adds	r3, #8
 800207a:	429a      	cmp	r2, r3
 800207c:	d104      	bne.n	8002088 <vTaskSwitchContext+0x8c>
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	4a09      	ldr	r2, [pc, #36]	@ (80020b4 <vTaskSwitchContext+0xb8>)
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4a06      	ldr	r2, [pc, #24]	@ (80020ac <vTaskSwitchContext+0xb0>)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6013      	str	r3, [r2, #0]
}
 8002098:	bf00      	nop
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	20000c34 	.word	0x20000c34
 80020a8:	20000c20 	.word	0x20000c20
 80020ac:	20000c14 	.word	0x20000c14
 80020b0:	2000073c 	.word	0x2000073c
 80020b4:	20000738 	.word	0x20000738

080020b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10b      	bne.n	80020e0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80020c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020cc:	f383 8811 	msr	BASEPRI, r3
 80020d0:	f3bf 8f6f 	isb	sy
 80020d4:	f3bf 8f4f 	dsb	sy
 80020d8:	60fb      	str	r3, [r7, #12]
}
 80020da:	bf00      	nop
 80020dc:	bf00      	nop
 80020de:	e7fd      	b.n	80020dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80020e0:	4b07      	ldr	r3, [pc, #28]	@ (8002100 <vTaskPlaceOnEventList+0x48>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	3318      	adds	r3, #24
 80020e6:	4619      	mov	r1, r3
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7fe fe70 	bl	8000dce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80020ee:	2101      	movs	r1, #1
 80020f0:	6838      	ldr	r0, [r7, #0]
 80020f2:	f000 fa81 	bl	80025f8 <prvAddCurrentTaskToDelayedList>
}
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000738 	.word	0x20000738

08002104 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10b      	bne.n	800212e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8002116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800211a:	f383 8811 	msr	BASEPRI, r3
 800211e:	f3bf 8f6f 	isb	sy
 8002122:	f3bf 8f4f 	dsb	sy
 8002126:	617b      	str	r3, [r7, #20]
}
 8002128:	bf00      	nop
 800212a:	bf00      	nop
 800212c:	e7fd      	b.n	800212a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800212e:	4b0a      	ldr	r3, [pc, #40]	@ (8002158 <vTaskPlaceOnEventListRestricted+0x54>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	3318      	adds	r3, #24
 8002134:	4619      	mov	r1, r3
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f7fe fe25 	bl	8000d86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d002      	beq.n	8002148 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002146:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	68b8      	ldr	r0, [r7, #8]
 800214c:	f000 fa54 	bl	80025f8 <prvAddCurrentTaskToDelayedList>
	}
 8002150:	bf00      	nop
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000738 	.word	0x20000738

0800215c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10b      	bne.n	800218a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002176:	f383 8811 	msr	BASEPRI, r3
 800217a:	f3bf 8f6f 	isb	sy
 800217e:	f3bf 8f4f 	dsb	sy
 8002182:	60fb      	str	r3, [r7, #12]
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	e7fd      	b.n	8002186 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	3318      	adds	r3, #24
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fe56 	bl	8000e40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002194:	4b1d      	ldr	r3, [pc, #116]	@ (800220c <xTaskRemoveFromEventList+0xb0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d11d      	bne.n	80021d8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	3304      	adds	r3, #4
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe fe4d 	bl	8000e40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021aa:	4b19      	ldr	r3, [pc, #100]	@ (8002210 <xTaskRemoveFromEventList+0xb4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d903      	bls.n	80021ba <xTaskRemoveFromEventList+0x5e>
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b6:	4a16      	ldr	r2, [pc, #88]	@ (8002210 <xTaskRemoveFromEventList+0xb4>)
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4a13      	ldr	r2, [pc, #76]	@ (8002214 <xTaskRemoveFromEventList+0xb8>)
 80021c8:	441a      	add	r2, r3
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	3304      	adds	r3, #4
 80021ce:	4619      	mov	r1, r3
 80021d0:	4610      	mov	r0, r2
 80021d2:	f7fe fdd8 	bl	8000d86 <vListInsertEnd>
 80021d6:	e005      	b.n	80021e4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	3318      	adds	r3, #24
 80021dc:	4619      	mov	r1, r3
 80021de:	480e      	ldr	r0, [pc, #56]	@ (8002218 <xTaskRemoveFromEventList+0xbc>)
 80021e0:	f7fe fdd1 	bl	8000d86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021e8:	4b0c      	ldr	r3, [pc, #48]	@ (800221c <xTaskRemoveFromEventList+0xc0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d905      	bls.n	80021fe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80021f2:	2301      	movs	r3, #1
 80021f4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80021f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002220 <xTaskRemoveFromEventList+0xc4>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	e001      	b.n	8002202 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002202:	697b      	ldr	r3, [r7, #20]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000c34 	.word	0x20000c34
 8002210:	20000c14 	.word	0x20000c14
 8002214:	2000073c 	.word	0x2000073c
 8002218:	20000bcc 	.word	0x20000bcc
 800221c:	20000738 	.word	0x20000738
 8002220:	20000c20 	.word	0x20000c20

08002224 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800222c:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <vTaskInternalSetTimeOutState+0x24>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002234:	4b05      	ldr	r3, [pc, #20]	@ (800224c <vTaskInternalSetTimeOutState+0x28>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	605a      	str	r2, [r3, #4]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	20000c24 	.word	0x20000c24
 800224c:	20000c10 	.word	0x20000c10

08002250 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10b      	bne.n	8002278 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8002260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002264:	f383 8811 	msr	BASEPRI, r3
 8002268:	f3bf 8f6f 	isb	sy
 800226c:	f3bf 8f4f 	dsb	sy
 8002270:	613b      	str	r3, [r7, #16]
}
 8002272:	bf00      	nop
 8002274:	bf00      	nop
 8002276:	e7fd      	b.n	8002274 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10b      	bne.n	8002296 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800227e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002282:	f383 8811 	msr	BASEPRI, r3
 8002286:	f3bf 8f6f 	isb	sy
 800228a:	f3bf 8f4f 	dsb	sy
 800228e:	60fb      	str	r3, [r7, #12]
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	e7fd      	b.n	8002292 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8002296:	f000 fe8f 	bl	8002fb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800229a:	4b1d      	ldr	r3, [pc, #116]	@ (8002310 <xTaskCheckForTimeOut+0xc0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022b2:	d102      	bne.n	80022ba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61fb      	str	r3, [r7, #28]
 80022b8:	e023      	b.n	8002302 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	4b15      	ldr	r3, [pc, #84]	@ (8002314 <xTaskCheckForTimeOut+0xc4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d007      	beq.n	80022d6 <xTaskCheckForTimeOut+0x86>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d302      	bcc.n	80022d6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80022d0:	2301      	movs	r3, #1
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	e015      	b.n	8002302 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d20b      	bcs.n	80022f8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	1ad2      	subs	r2, r2, r3
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ff99 	bl	8002224 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	e004      	b.n	8002302 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80022fe:	2301      	movs	r3, #1
 8002300:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002302:	f000 fe8b 	bl	800301c <vPortExitCritical>

	return xReturn;
 8002306:	69fb      	ldr	r3, [r7, #28]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3720      	adds	r7, #32
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000c10 	.word	0x20000c10
 8002314:	20000c24 	.word	0x20000c24

08002318 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800231c:	4b03      	ldr	r3, [pc, #12]	@ (800232c <vTaskMissedYield+0x14>)
 800231e:	2201      	movs	r2, #1
 8002320:	601a      	str	r2, [r3, #0]
}
 8002322:	bf00      	nop
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	20000c20 	.word	0x20000c20

08002330 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002338:	f000 f852 	bl	80023e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800233c:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <prvIdleTask+0x28>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d9f9      	bls.n	8002338 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002344:	4b05      	ldr	r3, [pc, #20]	@ (800235c <prvIdleTask+0x2c>)
 8002346:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	f3bf 8f4f 	dsb	sy
 8002350:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002354:	e7f0      	b.n	8002338 <prvIdleTask+0x8>
 8002356:	bf00      	nop
 8002358:	2000073c 	.word	0x2000073c
 800235c:	e000ed04 	.word	0xe000ed04

08002360 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002366:	2300      	movs	r3, #0
 8002368:	607b      	str	r3, [r7, #4]
 800236a:	e00c      	b.n	8002386 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4a12      	ldr	r2, [pc, #72]	@ (80023c0 <prvInitialiseTaskLists+0x60>)
 8002378:	4413      	add	r3, r2
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe fcd6 	bl	8000d2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3301      	adds	r3, #1
 8002384:	607b      	str	r3, [r7, #4]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b37      	cmp	r3, #55	@ 0x37
 800238a:	d9ef      	bls.n	800236c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800238c:	480d      	ldr	r0, [pc, #52]	@ (80023c4 <prvInitialiseTaskLists+0x64>)
 800238e:	f7fe fccd 	bl	8000d2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002392:	480d      	ldr	r0, [pc, #52]	@ (80023c8 <prvInitialiseTaskLists+0x68>)
 8002394:	f7fe fcca 	bl	8000d2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002398:	480c      	ldr	r0, [pc, #48]	@ (80023cc <prvInitialiseTaskLists+0x6c>)
 800239a:	f7fe fcc7 	bl	8000d2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800239e:	480c      	ldr	r0, [pc, #48]	@ (80023d0 <prvInitialiseTaskLists+0x70>)
 80023a0:	f7fe fcc4 	bl	8000d2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80023a4:	480b      	ldr	r0, [pc, #44]	@ (80023d4 <prvInitialiseTaskLists+0x74>)
 80023a6:	f7fe fcc1 	bl	8000d2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80023aa:	4b0b      	ldr	r3, [pc, #44]	@ (80023d8 <prvInitialiseTaskLists+0x78>)
 80023ac:	4a05      	ldr	r2, [pc, #20]	@ (80023c4 <prvInitialiseTaskLists+0x64>)
 80023ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80023b0:	4b0a      	ldr	r3, [pc, #40]	@ (80023dc <prvInitialiseTaskLists+0x7c>)
 80023b2:	4a05      	ldr	r2, [pc, #20]	@ (80023c8 <prvInitialiseTaskLists+0x68>)
 80023b4:	601a      	str	r2, [r3, #0]
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	2000073c 	.word	0x2000073c
 80023c4:	20000b9c 	.word	0x20000b9c
 80023c8:	20000bb0 	.word	0x20000bb0
 80023cc:	20000bcc 	.word	0x20000bcc
 80023d0:	20000be0 	.word	0x20000be0
 80023d4:	20000bf8 	.word	0x20000bf8
 80023d8:	20000bc4 	.word	0x20000bc4
 80023dc:	20000bc8 	.word	0x20000bc8

080023e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80023e6:	e019      	b.n	800241c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80023e8:	f000 fde6 	bl	8002fb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023ec:	4b10      	ldr	r3, [pc, #64]	@ (8002430 <prvCheckTasksWaitingTermination+0x50>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3304      	adds	r3, #4
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe fd21 	bl	8000e40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80023fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002434 <prvCheckTasksWaitingTermination+0x54>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	3b01      	subs	r3, #1
 8002404:	4a0b      	ldr	r2, [pc, #44]	@ (8002434 <prvCheckTasksWaitingTermination+0x54>)
 8002406:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002408:	4b0b      	ldr	r3, [pc, #44]	@ (8002438 <prvCheckTasksWaitingTermination+0x58>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	3b01      	subs	r3, #1
 800240e:	4a0a      	ldr	r2, [pc, #40]	@ (8002438 <prvCheckTasksWaitingTermination+0x58>)
 8002410:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002412:	f000 fe03 	bl	800301c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f810 	bl	800243c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800241c:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <prvCheckTasksWaitingTermination+0x58>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1e1      	bne.n	80023e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000be0 	.word	0x20000be0
 8002434:	20000c0c 	.word	0x20000c0c
 8002438:	20000bf4 	.word	0x20000bf4

0800243c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800244a:	2b00      	cmp	r3, #0
 800244c:	d108      	bne.n	8002460 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	4618      	mov	r0, r3
 8002454:	f000 ffa0 	bl	8003398 <vPortFree>
				vPortFree( pxTCB );
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 ff9d 	bl	8003398 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800245e:	e019      	b.n	8002494 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002466:	2b01      	cmp	r3, #1
 8002468:	d103      	bne.n	8002472 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 ff94 	bl	8003398 <vPortFree>
	}
 8002470:	e010      	b.n	8002494 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002478:	2b02      	cmp	r3, #2
 800247a:	d00b      	beq.n	8002494 <prvDeleteTCB+0x58>
	__asm volatile
 800247c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002480:	f383 8811 	msr	BASEPRI, r3
 8002484:	f3bf 8f6f 	isb	sy
 8002488:	f3bf 8f4f 	dsb	sy
 800248c:	60fb      	str	r3, [r7, #12]
}
 800248e:	bf00      	nop
 8002490:	bf00      	nop
 8002492:	e7fd      	b.n	8002490 <prvDeleteTCB+0x54>
	}
 8002494:	bf00      	nop
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024a2:	4b0c      	ldr	r3, [pc, #48]	@ (80024d4 <prvResetNextTaskUnblockTime+0x38>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d104      	bne.n	80024b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80024ac:	4b0a      	ldr	r3, [pc, #40]	@ (80024d8 <prvResetNextTaskUnblockTime+0x3c>)
 80024ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80024b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80024b4:	e008      	b.n	80024c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024b6:	4b07      	ldr	r3, [pc, #28]	@ (80024d4 <prvResetNextTaskUnblockTime+0x38>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	4a04      	ldr	r2, [pc, #16]	@ (80024d8 <prvResetNextTaskUnblockTime+0x3c>)
 80024c6:	6013      	str	r3, [r2, #0]
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	20000bc4 	.word	0x20000bc4
 80024d8:	20000c2c 	.word	0x20000c2c

080024dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80024e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002510 <xTaskGetSchedulerState+0x34>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d102      	bne.n	80024f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80024ea:	2301      	movs	r3, #1
 80024ec:	607b      	str	r3, [r7, #4]
 80024ee:	e008      	b.n	8002502 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024f0:	4b08      	ldr	r3, [pc, #32]	@ (8002514 <xTaskGetSchedulerState+0x38>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80024f8:	2302      	movs	r3, #2
 80024fa:	607b      	str	r3, [r7, #4]
 80024fc:	e001      	b.n	8002502 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80024fe:	2300      	movs	r3, #0
 8002500:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002502:	687b      	ldr	r3, [r7, #4]
	}
 8002504:	4618      	mov	r0, r3
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	20000c18 	.word	0x20000c18
 8002514:	20000c34 	.word	0x20000c34

08002518 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d058      	beq.n	80025e0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800252e:	4b2f      	ldr	r3, [pc, #188]	@ (80025ec <xTaskPriorityDisinherit+0xd4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	429a      	cmp	r2, r3
 8002536:	d00b      	beq.n	8002550 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8002538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800253c:	f383 8811 	msr	BASEPRI, r3
 8002540:	f3bf 8f6f 	isb	sy
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	60fb      	str	r3, [r7, #12]
}
 800254a:	bf00      	nop
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10b      	bne.n	8002570 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8002558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800255c:	f383 8811 	msr	BASEPRI, r3
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	60bb      	str	r3, [r7, #8]
}
 800256a:	bf00      	nop
 800256c:	bf00      	nop
 800256e:	e7fd      	b.n	800256c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002574:	1e5a      	subs	r2, r3, #1
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002582:	429a      	cmp	r2, r3
 8002584:	d02c      	beq.n	80025e0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800258a:	2b00      	cmp	r3, #0
 800258c:	d128      	bne.n	80025e0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	3304      	adds	r3, #4
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe fc54 	bl	8000e40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025b0:	4b0f      	ldr	r3, [pc, #60]	@ (80025f0 <xTaskPriorityDisinherit+0xd8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d903      	bls.n	80025c0 <xTaskPriorityDisinherit+0xa8>
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025bc:	4a0c      	ldr	r2, [pc, #48]	@ (80025f0 <xTaskPriorityDisinherit+0xd8>)
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4a09      	ldr	r2, [pc, #36]	@ (80025f4 <xTaskPriorityDisinherit+0xdc>)
 80025ce:	441a      	add	r2, r3
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	3304      	adds	r3, #4
 80025d4:	4619      	mov	r1, r3
 80025d6:	4610      	mov	r0, r2
 80025d8:	f7fe fbd5 	bl	8000d86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80025dc:	2301      	movs	r3, #1
 80025de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80025e0:	697b      	ldr	r3, [r7, #20]
	}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000738 	.word	0x20000738
 80025f0:	20000c14 	.word	0x20000c14
 80025f4:	2000073c 	.word	0x2000073c

080025f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002602:	4b21      	ldr	r3, [pc, #132]	@ (8002688 <prvAddCurrentTaskToDelayedList+0x90>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002608:	4b20      	ldr	r3, [pc, #128]	@ (800268c <prvAddCurrentTaskToDelayedList+0x94>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	3304      	adds	r3, #4
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe fc16 	bl	8000e40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800261a:	d10a      	bne.n	8002632 <prvAddCurrentTaskToDelayedList+0x3a>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d007      	beq.n	8002632 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002622:	4b1a      	ldr	r3, [pc, #104]	@ (800268c <prvAddCurrentTaskToDelayedList+0x94>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	3304      	adds	r3, #4
 8002628:	4619      	mov	r1, r3
 800262a:	4819      	ldr	r0, [pc, #100]	@ (8002690 <prvAddCurrentTaskToDelayedList+0x98>)
 800262c:	f7fe fbab 	bl	8000d86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002630:	e026      	b.n	8002680 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4413      	add	r3, r2
 8002638:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800263a:	4b14      	ldr	r3, [pc, #80]	@ (800268c <prvAddCurrentTaskToDelayedList+0x94>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	429a      	cmp	r2, r3
 8002648:	d209      	bcs.n	800265e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800264a:	4b12      	ldr	r3, [pc, #72]	@ (8002694 <prvAddCurrentTaskToDelayedList+0x9c>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	4b0f      	ldr	r3, [pc, #60]	@ (800268c <prvAddCurrentTaskToDelayedList+0x94>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	3304      	adds	r3, #4
 8002654:	4619      	mov	r1, r3
 8002656:	4610      	mov	r0, r2
 8002658:	f7fe fbb9 	bl	8000dce <vListInsert>
}
 800265c:	e010      	b.n	8002680 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800265e:	4b0e      	ldr	r3, [pc, #56]	@ (8002698 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4b0a      	ldr	r3, [pc, #40]	@ (800268c <prvAddCurrentTaskToDelayedList+0x94>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	3304      	adds	r3, #4
 8002668:	4619      	mov	r1, r3
 800266a:	4610      	mov	r0, r2
 800266c:	f7fe fbaf 	bl	8000dce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002670:	4b0a      	ldr	r3, [pc, #40]	@ (800269c <prvAddCurrentTaskToDelayedList+0xa4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	429a      	cmp	r2, r3
 8002678:	d202      	bcs.n	8002680 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800267a:	4a08      	ldr	r2, [pc, #32]	@ (800269c <prvAddCurrentTaskToDelayedList+0xa4>)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	6013      	str	r3, [r2, #0]
}
 8002680:	bf00      	nop
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20000c10 	.word	0x20000c10
 800268c:	20000738 	.word	0x20000738
 8002690:	20000bf8 	.word	0x20000bf8
 8002694:	20000bc8 	.word	0x20000bc8
 8002698:	20000bc4 	.word	0x20000bc4
 800269c:	20000c2c 	.word	0x20000c2c

080026a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	@ 0x28
 80026a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80026aa:	f000 fb13 	bl	8002cd4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80026ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002724 <xTimerCreateTimerTask+0x84>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d021      	beq.n	80026fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80026be:	1d3a      	adds	r2, r7, #4
 80026c0:	f107 0108 	add.w	r1, r7, #8
 80026c4:	f107 030c 	add.w	r3, r7, #12
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fe fb15 	bl	8000cf8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	9202      	str	r2, [sp, #8]
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	2302      	movs	r3, #2
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	2300      	movs	r3, #0
 80026de:	460a      	mov	r2, r1
 80026e0:	4911      	ldr	r1, [pc, #68]	@ (8002728 <xTimerCreateTimerTask+0x88>)
 80026e2:	4812      	ldr	r0, [pc, #72]	@ (800272c <xTimerCreateTimerTask+0x8c>)
 80026e4:	f7ff f8d0 	bl	8001888 <xTaskCreateStatic>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4a11      	ldr	r2, [pc, #68]	@ (8002730 <xTimerCreateTimerTask+0x90>)
 80026ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80026ee:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <xTimerCreateTimerTask+0x90>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80026f6:	2301      	movs	r3, #1
 80026f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10b      	bne.n	8002718 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8002700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002704:	f383 8811 	msr	BASEPRI, r3
 8002708:	f3bf 8f6f 	isb	sy
 800270c:	f3bf 8f4f 	dsb	sy
 8002710:	613b      	str	r3, [r7, #16]
}
 8002712:	bf00      	nop
 8002714:	bf00      	nop
 8002716:	e7fd      	b.n	8002714 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8002718:	697b      	ldr	r3, [r7, #20]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000c68 	.word	0x20000c68
 8002728:	08003690 	.word	0x08003690
 800272c:	0800286d 	.word	0x0800286d
 8002730:	20000c6c 	.word	0x20000c6c

08002734 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	@ 0x28
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
 8002740:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10b      	bne.n	8002764 <xTimerGenericCommand+0x30>
	__asm volatile
 800274c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002750:	f383 8811 	msr	BASEPRI, r3
 8002754:	f3bf 8f6f 	isb	sy
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	623b      	str	r3, [r7, #32]
}
 800275e:	bf00      	nop
 8002760:	bf00      	nop
 8002762:	e7fd      	b.n	8002760 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002764:	4b19      	ldr	r3, [pc, #100]	@ (80027cc <xTimerGenericCommand+0x98>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d02a      	beq.n	80027c2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2b05      	cmp	r3, #5
 800277c:	dc18      	bgt.n	80027b0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800277e:	f7ff fead 	bl	80024dc <xTaskGetSchedulerState>
 8002782:	4603      	mov	r3, r0
 8002784:	2b02      	cmp	r3, #2
 8002786:	d109      	bne.n	800279c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002788:	4b10      	ldr	r3, [pc, #64]	@ (80027cc <xTimerGenericCommand+0x98>)
 800278a:	6818      	ldr	r0, [r3, #0]
 800278c:	f107 0110 	add.w	r1, r7, #16
 8002790:	2300      	movs	r3, #0
 8002792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002794:	f7fe fc88 	bl	80010a8 <xQueueGenericSend>
 8002798:	6278      	str	r0, [r7, #36]	@ 0x24
 800279a:	e012      	b.n	80027c2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800279c:	4b0b      	ldr	r3, [pc, #44]	@ (80027cc <xTimerGenericCommand+0x98>)
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	f107 0110 	add.w	r1, r7, #16
 80027a4:	2300      	movs	r3, #0
 80027a6:	2200      	movs	r2, #0
 80027a8:	f7fe fc7e 	bl	80010a8 <xQueueGenericSend>
 80027ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80027ae:	e008      	b.n	80027c2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80027b0:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <xTimerGenericCommand+0x98>)
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	f107 0110 	add.w	r1, r7, #16
 80027b8:	2300      	movs	r3, #0
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	f7fe fd76 	bl	80012ac <xQueueGenericSendFromISR>
 80027c0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3728      	adds	r7, #40	@ 0x28
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000c68 	.word	0x20000c68

080027d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027da:	4b23      	ldr	r3, [pc, #140]	@ (8002868 <prvProcessExpiredTimer+0x98>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	3304      	adds	r3, #4
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe fb29 	bl	8000e40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d023      	beq.n	8002844 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	699a      	ldr	r2, [r3, #24]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	18d1      	adds	r1, r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	6978      	ldr	r0, [r7, #20]
 800280a:	f000 f8d5 	bl	80029b8 <prvInsertTimerInActiveList>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d020      	beq.n	8002856 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002814:	2300      	movs	r3, #0
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	2300      	movs	r3, #0
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	2100      	movs	r1, #0
 800281e:	6978      	ldr	r0, [r7, #20]
 8002820:	f7ff ff88 	bl	8002734 <xTimerGenericCommand>
 8002824:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d114      	bne.n	8002856 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800282c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002830:	f383 8811 	msr	BASEPRI, r3
 8002834:	f3bf 8f6f 	isb	sy
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	60fb      	str	r3, [r7, #12]
}
 800283e:	bf00      	nop
 8002840:	bf00      	nop
 8002842:	e7fd      	b.n	8002840 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800284a:	f023 0301 	bic.w	r3, r3, #1
 800284e:	b2da      	uxtb	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	6978      	ldr	r0, [r7, #20]
 800285c:	4798      	blx	r3
}
 800285e:	bf00      	nop
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000c60 	.word	0x20000c60

0800286c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002874:	f107 0308 	add.w	r3, r7, #8
 8002878:	4618      	mov	r0, r3
 800287a:	f000 f859 	bl	8002930 <prvGetNextExpireTime>
 800287e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4619      	mov	r1, r3
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f805 	bl	8002894 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800288a:	f000 f8d7 	bl	8002a3c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800288e:	bf00      	nop
 8002890:	e7f0      	b.n	8002874 <prvTimerTask+0x8>
	...

08002894 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800289e:	f7ff fa37 	bl	8001d10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80028a2:	f107 0308 	add.w	r3, r7, #8
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 f866 	bl	8002978 <prvSampleTimeNow>
 80028ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d130      	bne.n	8002916 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10a      	bne.n	80028d0 <prvProcessTimerOrBlockTask+0x3c>
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d806      	bhi.n	80028d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80028c2:	f7ff fa33 	bl	8001d2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80028c6:	68f9      	ldr	r1, [r7, #12]
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff ff81 	bl	80027d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80028ce:	e024      	b.n	800291a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d008      	beq.n	80028e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80028d6:	4b13      	ldr	r3, [pc, #76]	@ (8002924 <prvProcessTimerOrBlockTask+0x90>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <prvProcessTimerOrBlockTask+0x50>
 80028e0:	2301      	movs	r3, #1
 80028e2:	e000      	b.n	80028e6 <prvProcessTimerOrBlockTask+0x52>
 80028e4:	2300      	movs	r3, #0
 80028e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80028e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002928 <prvProcessTimerOrBlockTask+0x94>)
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	4619      	mov	r1, r3
 80028f6:	f7fe ff93 	bl	8001820 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80028fa:	f7ff fa17 	bl	8001d2c <xTaskResumeAll>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10a      	bne.n	800291a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002904:	4b09      	ldr	r3, [pc, #36]	@ (800292c <prvProcessTimerOrBlockTask+0x98>)
 8002906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	f3bf 8f4f 	dsb	sy
 8002910:	f3bf 8f6f 	isb	sy
}
 8002914:	e001      	b.n	800291a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002916:	f7ff fa09 	bl	8001d2c <xTaskResumeAll>
}
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000c64 	.word	0x20000c64
 8002928:	20000c68 	.word	0x20000c68
 800292c:	e000ed04 	.word	0xe000ed04

08002930 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002938:	4b0e      	ldr	r3, [pc, #56]	@ (8002974 <prvGetNextExpireTime+0x44>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <prvGetNextExpireTime+0x16>
 8002942:	2201      	movs	r2, #1
 8002944:	e000      	b.n	8002948 <prvGetNextExpireTime+0x18>
 8002946:	2200      	movs	r2, #0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d105      	bne.n	8002960 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002954:	4b07      	ldr	r3, [pc, #28]	@ (8002974 <prvGetNextExpireTime+0x44>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	e001      	b.n	8002964 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002964:	68fb      	ldr	r3, [r7, #12]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20000c60 	.word	0x20000c60

08002978 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002980:	f7ff fa72 	bl	8001e68 <xTaskGetTickCount>
 8002984:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002986:	4b0b      	ldr	r3, [pc, #44]	@ (80029b4 <prvSampleTimeNow+0x3c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	429a      	cmp	r2, r3
 800298e:	d205      	bcs.n	800299c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002990:	f000 f93a 	bl	8002c08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	e002      	b.n	80029a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80029a2:	4a04      	ldr	r2, [pc, #16]	@ (80029b4 <prvSampleTimeNow+0x3c>)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80029a8:	68fb      	ldr	r3, [r7, #12]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000c70 	.word	0x20000c70

080029b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d812      	bhi.n	8002a04 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	1ad2      	subs	r2, r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d302      	bcc.n	80029f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80029ec:	2301      	movs	r3, #1
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	e01b      	b.n	8002a2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80029f2:	4b10      	ldr	r3, [pc, #64]	@ (8002a34 <prvInsertTimerInActiveList+0x7c>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	3304      	adds	r3, #4
 80029fa:	4619      	mov	r1, r3
 80029fc:	4610      	mov	r0, r2
 80029fe:	f7fe f9e6 	bl	8000dce <vListInsert>
 8002a02:	e012      	b.n	8002a2a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d206      	bcs.n	8002a1a <prvInsertTimerInActiveList+0x62>
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d302      	bcc.n	8002a1a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002a14:	2301      	movs	r3, #1
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	e007      	b.n	8002a2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002a1a:	4b07      	ldr	r3, [pc, #28]	@ (8002a38 <prvInsertTimerInActiveList+0x80>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	3304      	adds	r3, #4
 8002a22:	4619      	mov	r1, r3
 8002a24:	4610      	mov	r0, r2
 8002a26:	f7fe f9d2 	bl	8000dce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002a2a:	697b      	ldr	r3, [r7, #20]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20000c64 	.word	0x20000c64
 8002a38:	20000c60 	.word	0x20000c60

08002a3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08e      	sub	sp, #56	@ 0x38
 8002a40:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002a42:	e0ce      	b.n	8002be2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	da19      	bge.n	8002a7e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8002a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10b      	bne.n	8002a6e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8002a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a5a:	f383 8811 	msr	BASEPRI, r3
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	f3bf 8f4f 	dsb	sy
 8002a66:	61fb      	str	r3, [r7, #28]
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	e7fd      	b.n	8002a6a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8002a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a74:	6850      	ldr	r0, [r2, #4]
 8002a76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a78:	6892      	ldr	r2, [r2, #8]
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f2c0 80ae 	blt.w	8002be2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d004      	beq.n	8002a9c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a94:	3304      	adds	r3, #4
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe f9d2 	bl	8000e40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002a9c:	463b      	mov	r3, r7
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff ff6a 	bl	8002978 <prvSampleTimeNow>
 8002aa4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b09      	cmp	r3, #9
 8002aaa:	f200 8097 	bhi.w	8002bdc <prvProcessReceivedCommands+0x1a0>
 8002aae:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab4 <prvProcessReceivedCommands+0x78>)
 8002ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab4:	08002add 	.word	0x08002add
 8002ab8:	08002add 	.word	0x08002add
 8002abc:	08002add 	.word	0x08002add
 8002ac0:	08002b53 	.word	0x08002b53
 8002ac4:	08002b67 	.word	0x08002b67
 8002ac8:	08002bb3 	.word	0x08002bb3
 8002acc:	08002add 	.word	0x08002add
 8002ad0:	08002add 	.word	0x08002add
 8002ad4:	08002b53 	.word	0x08002b53
 8002ad8:	08002b67 	.word	0x08002b67
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ade:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	18d1      	adds	r1, r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002afa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002afc:	f7ff ff5c 	bl	80029b8 <prvInsertTimerInActiveList>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d06c      	beq.n	8002be0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b0c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d061      	beq.n	8002be0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	441a      	add	r2, r3
 8002b24:	2300      	movs	r3, #0
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b2e:	f7ff fe01 	bl	8002734 <xTimerGenericCommand>
 8002b32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d152      	bne.n	8002be0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8002b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b3e:	f383 8811 	msr	BASEPRI, r3
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	61bb      	str	r3, [r7, #24]
}
 8002b4c:	bf00      	nop
 8002b4e:	bf00      	nop
 8002b50:	e7fd      	b.n	8002b4e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002b58:	f023 0301 	bic.w	r3, r3, #1
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8002b64:	e03d      	b.n	8002be2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b7c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10b      	bne.n	8002b9e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8002b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b8a:	f383 8811 	msr	BASEPRI, r3
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	f3bf 8f4f 	dsb	sy
 8002b96:	617b      	str	r3, [r7, #20]
}
 8002b98:	bf00      	nop
 8002b9a:	bf00      	nop
 8002b9c:	e7fd      	b.n	8002b9a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ba0:	699a      	ldr	r2, [r3, #24]
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba4:	18d1      	adds	r1, r2, r3
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002baa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bac:	f7ff ff04 	bl	80029b8 <prvInsertTimerInActiveList>
					break;
 8002bb0:	e017      	b.n	8002be2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d103      	bne.n	8002bc8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8002bc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bc2:	f000 fbe9 	bl	8003398 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002bc6:	e00c      	b.n	8002be2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002bce:	f023 0301 	bic.w	r3, r3, #1
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8002bda:	e002      	b.n	8002be2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8002bdc:	bf00      	nop
 8002bde:	e000      	b.n	8002be2 <prvProcessReceivedCommands+0x1a6>
					break;
 8002be0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002be2:	4b08      	ldr	r3, [pc, #32]	@ (8002c04 <prvProcessReceivedCommands+0x1c8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	1d39      	adds	r1, r7, #4
 8002be8:	2200      	movs	r2, #0
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe fbfc 	bl	80013e8 <xQueueReceive>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f47f af26 	bne.w	8002a44 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002bf8:	bf00      	nop
 8002bfa:	bf00      	nop
 8002bfc:	3730      	adds	r7, #48	@ 0x30
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000c68 	.word	0x20000c68

08002c08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002c0e:	e049      	b.n	8002ca4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002c10:	4b2e      	ldr	r3, [pc, #184]	@ (8002ccc <prvSwitchTimerLists+0xc4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8002ccc <prvSwitchTimerLists+0xc4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	3304      	adds	r3, #4
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fe f909 	bl	8000e40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d02f      	beq.n	8002ca4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d90e      	bls.n	8002c74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002c62:	4b1a      	ldr	r3, [pc, #104]	@ (8002ccc <prvSwitchTimerLists+0xc4>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4610      	mov	r0, r2
 8002c6e:	f7fe f8ae 	bl	8000dce <vListInsert>
 8002c72:	e017      	b.n	8002ca4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002c74:	2300      	movs	r3, #0
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f7ff fd58 	bl	8002734 <xTimerGenericCommand>
 8002c84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10b      	bne.n	8002ca4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8002c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	603b      	str	r3, [r7, #0]
}
 8002c9e:	bf00      	nop
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002ca4:	4b09      	ldr	r3, [pc, #36]	@ (8002ccc <prvSwitchTimerLists+0xc4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1b0      	bne.n	8002c10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002cae:	4b07      	ldr	r3, [pc, #28]	@ (8002ccc <prvSwitchTimerLists+0xc4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8002cb4:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <prvSwitchTimerLists+0xc8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a04      	ldr	r2, [pc, #16]	@ (8002ccc <prvSwitchTimerLists+0xc4>)
 8002cba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002cbc:	4a04      	ldr	r2, [pc, #16]	@ (8002cd0 <prvSwitchTimerLists+0xc8>)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	6013      	str	r3, [r2, #0]
}
 8002cc2:	bf00      	nop
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000c60 	.word	0x20000c60
 8002cd0:	20000c64 	.word	0x20000c64

08002cd4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002cda:	f000 f96d 	bl	8002fb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002cde:	4b15      	ldr	r3, [pc, #84]	@ (8002d34 <prvCheckForValidListAndQueue+0x60>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d120      	bne.n	8002d28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8002ce6:	4814      	ldr	r0, [pc, #80]	@ (8002d38 <prvCheckForValidListAndQueue+0x64>)
 8002ce8:	f7fe f820 	bl	8000d2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002cec:	4813      	ldr	r0, [pc, #76]	@ (8002d3c <prvCheckForValidListAndQueue+0x68>)
 8002cee:	f7fe f81d 	bl	8000d2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002cf2:	4b13      	ldr	r3, [pc, #76]	@ (8002d40 <prvCheckForValidListAndQueue+0x6c>)
 8002cf4:	4a10      	ldr	r2, [pc, #64]	@ (8002d38 <prvCheckForValidListAndQueue+0x64>)
 8002cf6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002cf8:	4b12      	ldr	r3, [pc, #72]	@ (8002d44 <prvCheckForValidListAndQueue+0x70>)
 8002cfa:	4a10      	ldr	r2, [pc, #64]	@ (8002d3c <prvCheckForValidListAndQueue+0x68>)
 8002cfc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002cfe:	2300      	movs	r3, #0
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	4b11      	ldr	r3, [pc, #68]	@ (8002d48 <prvCheckForValidListAndQueue+0x74>)
 8002d04:	4a11      	ldr	r2, [pc, #68]	@ (8002d4c <prvCheckForValidListAndQueue+0x78>)
 8002d06:	2110      	movs	r1, #16
 8002d08:	200a      	movs	r0, #10
 8002d0a:	f7fe f92d 	bl	8000f68 <xQueueGenericCreateStatic>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4a08      	ldr	r2, [pc, #32]	@ (8002d34 <prvCheckForValidListAndQueue+0x60>)
 8002d12:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002d14:	4b07      	ldr	r3, [pc, #28]	@ (8002d34 <prvCheckForValidListAndQueue+0x60>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002d1c:	4b05      	ldr	r3, [pc, #20]	@ (8002d34 <prvCheckForValidListAndQueue+0x60>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	490b      	ldr	r1, [pc, #44]	@ (8002d50 <prvCheckForValidListAndQueue+0x7c>)
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe fd52 	bl	80017cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002d28:	f000 f978 	bl	800301c <vPortExitCritical>
}
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000c68 	.word	0x20000c68
 8002d38:	20000c38 	.word	0x20000c38
 8002d3c:	20000c4c 	.word	0x20000c4c
 8002d40:	20000c60 	.word	0x20000c60
 8002d44:	20000c64 	.word	0x20000c64
 8002d48:	20000d14 	.word	0x20000d14
 8002d4c:	20000c74 	.word	0x20000c74
 8002d50:	08003698 	.word	0x08003698

08002d54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	3b04      	subs	r3, #4
 8002d64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	3b04      	subs	r3, #4
 8002d72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f023 0201 	bic.w	r2, r3, #1
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	3b04      	subs	r3, #4
 8002d82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002d84:	4a0c      	ldr	r2, [pc, #48]	@ (8002db8 <pxPortInitialiseStack+0x64>)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	3b14      	subs	r3, #20
 8002d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	3b04      	subs	r3, #4
 8002d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f06f 0202 	mvn.w	r2, #2
 8002da2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	3b20      	subs	r3, #32
 8002da8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002daa:	68fb      	ldr	r3, [r7, #12]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	08002dbd 	.word	0x08002dbd

08002dbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002dc6:	4b13      	ldr	r3, [pc, #76]	@ (8002e14 <prvTaskExitError+0x58>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dce:	d00b      	beq.n	8002de8 <prvTaskExitError+0x2c>
	__asm volatile
 8002dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dd4:	f383 8811 	msr	BASEPRI, r3
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	60fb      	str	r3, [r7, #12]
}
 8002de2:	bf00      	nop
 8002de4:	bf00      	nop
 8002de6:	e7fd      	b.n	8002de4 <prvTaskExitError+0x28>
	__asm volatile
 8002de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	60bb      	str	r3, [r7, #8]
}
 8002dfa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002dfc:	bf00      	nop
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0fc      	beq.n	8002dfe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002e04:	bf00      	nop
 8002e06:	bf00      	nop
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000010 	.word	0x20000010
	...

08002e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002e20:	4b07      	ldr	r3, [pc, #28]	@ (8002e40 <pxCurrentTCBConst2>)
 8002e22:	6819      	ldr	r1, [r3, #0]
 8002e24:	6808      	ldr	r0, [r1, #0]
 8002e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e2a:	f380 8809 	msr	PSP, r0
 8002e2e:	f3bf 8f6f 	isb	sy
 8002e32:	f04f 0000 	mov.w	r0, #0
 8002e36:	f380 8811 	msr	BASEPRI, r0
 8002e3a:	4770      	bx	lr
 8002e3c:	f3af 8000 	nop.w

08002e40 <pxCurrentTCBConst2>:
 8002e40:	20000738 	.word	0x20000738
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop

08002e48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002e48:	4808      	ldr	r0, [pc, #32]	@ (8002e6c <prvPortStartFirstTask+0x24>)
 8002e4a:	6800      	ldr	r0, [r0, #0]
 8002e4c:	6800      	ldr	r0, [r0, #0]
 8002e4e:	f380 8808 	msr	MSP, r0
 8002e52:	f04f 0000 	mov.w	r0, #0
 8002e56:	f380 8814 	msr	CONTROL, r0
 8002e5a:	b662      	cpsie	i
 8002e5c:	b661      	cpsie	f
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	df00      	svc	0
 8002e68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002e6a:	bf00      	nop
 8002e6c:	e000ed08 	.word	0xe000ed08

08002e70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e76:	4b47      	ldr	r3, [pc, #284]	@ (8002f94 <xPortStartScheduler+0x124>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a47      	ldr	r2, [pc, #284]	@ (8002f98 <xPortStartScheduler+0x128>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d10b      	bne.n	8002e98 <xPortStartScheduler+0x28>
	__asm volatile
 8002e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	613b      	str	r3, [r7, #16]
}
 8002e92:	bf00      	nop
 8002e94:	bf00      	nop
 8002e96:	e7fd      	b.n	8002e94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e98:	4b3e      	ldr	r3, [pc, #248]	@ (8002f94 <xPortStartScheduler+0x124>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a3f      	ldr	r2, [pc, #252]	@ (8002f9c <xPortStartScheduler+0x12c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d10b      	bne.n	8002eba <xPortStartScheduler+0x4a>
	__asm volatile
 8002ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ea6:	f383 8811 	msr	BASEPRI, r3
 8002eaa:	f3bf 8f6f 	isb	sy
 8002eae:	f3bf 8f4f 	dsb	sy
 8002eb2:	60fb      	str	r3, [r7, #12]
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	e7fd      	b.n	8002eb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002eba:	4b39      	ldr	r3, [pc, #228]	@ (8002fa0 <xPortStartScheduler+0x130>)
 8002ebc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	22ff      	movs	r2, #255	@ 0xff
 8002eca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	4b31      	ldr	r3, [pc, #196]	@ (8002fa4 <xPortStartScheduler+0x134>)
 8002ee0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ee2:	4b31      	ldr	r3, [pc, #196]	@ (8002fa8 <xPortStartScheduler+0x138>)
 8002ee4:	2207      	movs	r2, #7
 8002ee6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ee8:	e009      	b.n	8002efe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8002eea:	4b2f      	ldr	r3, [pc, #188]	@ (8002fa8 <xPortStartScheduler+0x138>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	4a2d      	ldr	r2, [pc, #180]	@ (8002fa8 <xPortStartScheduler+0x138>)
 8002ef2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002efe:	78fb      	ldrb	r3, [r7, #3]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f06:	2b80      	cmp	r3, #128	@ 0x80
 8002f08:	d0ef      	beq.n	8002eea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f0a:	4b27      	ldr	r3, [pc, #156]	@ (8002fa8 <xPortStartScheduler+0x138>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f1c3 0307 	rsb	r3, r3, #7
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d00b      	beq.n	8002f2e <xPortStartScheduler+0xbe>
	__asm volatile
 8002f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f1a:	f383 8811 	msr	BASEPRI, r3
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	f3bf 8f4f 	dsb	sy
 8002f26:	60bb      	str	r3, [r7, #8]
}
 8002f28:	bf00      	nop
 8002f2a:	bf00      	nop
 8002f2c:	e7fd      	b.n	8002f2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa8 <xPortStartScheduler+0x138>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	021b      	lsls	r3, r3, #8
 8002f34:	4a1c      	ldr	r2, [pc, #112]	@ (8002fa8 <xPortStartScheduler+0x138>)
 8002f36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f38:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa8 <xPortStartScheduler+0x138>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f40:	4a19      	ldr	r2, [pc, #100]	@ (8002fa8 <xPortStartScheduler+0x138>)
 8002f42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002f4c:	4b17      	ldr	r3, [pc, #92]	@ (8002fac <xPortStartScheduler+0x13c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a16      	ldr	r2, [pc, #88]	@ (8002fac <xPortStartScheduler+0x13c>)
 8002f52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002f58:	4b14      	ldr	r3, [pc, #80]	@ (8002fac <xPortStartScheduler+0x13c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a13      	ldr	r2, [pc, #76]	@ (8002fac <xPortStartScheduler+0x13c>)
 8002f5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002f62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002f64:	f000 f8da 	bl	800311c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002f68:	4b11      	ldr	r3, [pc, #68]	@ (8002fb0 <xPortStartScheduler+0x140>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002f6e:	f000 f8f9 	bl	8003164 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002f72:	4b10      	ldr	r3, [pc, #64]	@ (8002fb4 <xPortStartScheduler+0x144>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a0f      	ldr	r2, [pc, #60]	@ (8002fb4 <xPortStartScheduler+0x144>)
 8002f78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002f7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002f7e:	f7ff ff63 	bl	8002e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002f82:	f7ff f83b 	bl	8001ffc <vTaskSwitchContext>
	prvTaskExitError();
 8002f86:	f7ff ff19 	bl	8002dbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	e000ed00 	.word	0xe000ed00
 8002f98:	410fc271 	.word	0x410fc271
 8002f9c:	410fc270 	.word	0x410fc270
 8002fa0:	e000e400 	.word	0xe000e400
 8002fa4:	20000d64 	.word	0x20000d64
 8002fa8:	20000d68 	.word	0x20000d68
 8002fac:	e000ed20 	.word	0xe000ed20
 8002fb0:	20000010 	.word	0x20000010
 8002fb4:	e000ef34 	.word	0xe000ef34

08002fb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8002fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	607b      	str	r3, [r7, #4]
}
 8002fd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002fd2:	4b10      	ldr	r3, [pc, #64]	@ (8003014 <vPortEnterCritical+0x5c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	4a0e      	ldr	r2, [pc, #56]	@ (8003014 <vPortEnterCritical+0x5c>)
 8002fda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8003014 <vPortEnterCritical+0x5c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d110      	bne.n	8003006 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8003018 <vPortEnterCritical+0x60>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00b      	beq.n	8003006 <vPortEnterCritical+0x4e>
	__asm volatile
 8002fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff2:	f383 8811 	msr	BASEPRI, r3
 8002ff6:	f3bf 8f6f 	isb	sy
 8002ffa:	f3bf 8f4f 	dsb	sy
 8002ffe:	603b      	str	r3, [r7, #0]
}
 8003000:	bf00      	nop
 8003002:	bf00      	nop
 8003004:	e7fd      	b.n	8003002 <vPortEnterCritical+0x4a>
	}
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20000010 	.word	0x20000010
 8003018:	e000ed04 	.word	0xe000ed04

0800301c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003022:	4b12      	ldr	r3, [pc, #72]	@ (800306c <vPortExitCritical+0x50>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10b      	bne.n	8003042 <vPortExitCritical+0x26>
	__asm volatile
 800302a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800302e:	f383 8811 	msr	BASEPRI, r3
 8003032:	f3bf 8f6f 	isb	sy
 8003036:	f3bf 8f4f 	dsb	sy
 800303a:	607b      	str	r3, [r7, #4]
}
 800303c:	bf00      	nop
 800303e:	bf00      	nop
 8003040:	e7fd      	b.n	800303e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003042:	4b0a      	ldr	r3, [pc, #40]	@ (800306c <vPortExitCritical+0x50>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	3b01      	subs	r3, #1
 8003048:	4a08      	ldr	r2, [pc, #32]	@ (800306c <vPortExitCritical+0x50>)
 800304a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800304c:	4b07      	ldr	r3, [pc, #28]	@ (800306c <vPortExitCritical+0x50>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d105      	bne.n	8003060 <vPortExitCritical+0x44>
 8003054:	2300      	movs	r3, #0
 8003056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f383 8811 	msr	BASEPRI, r3
}
 800305e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	20000010 	.word	0x20000010

08003070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003070:	f3ef 8009 	mrs	r0, PSP
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	4b15      	ldr	r3, [pc, #84]	@ (80030d0 <pxCurrentTCBConst>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	f01e 0f10 	tst.w	lr, #16
 8003080:	bf08      	it	eq
 8003082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800308a:	6010      	str	r0, [r2, #0]
 800308c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003090:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003094:	f380 8811 	msr	BASEPRI, r0
 8003098:	f3bf 8f4f 	dsb	sy
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f7fe ffac 	bl	8001ffc <vTaskSwitchContext>
 80030a4:	f04f 0000 	mov.w	r0, #0
 80030a8:	f380 8811 	msr	BASEPRI, r0
 80030ac:	bc09      	pop	{r0, r3}
 80030ae:	6819      	ldr	r1, [r3, #0]
 80030b0:	6808      	ldr	r0, [r1, #0]
 80030b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030b6:	f01e 0f10 	tst.w	lr, #16
 80030ba:	bf08      	it	eq
 80030bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80030c0:	f380 8809 	msr	PSP, r0
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	f3af 8000 	nop.w

080030d0 <pxCurrentTCBConst>:
 80030d0:	20000738 	.word	0x20000738
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80030d4:	bf00      	nop
 80030d6:	bf00      	nop

080030d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
	__asm volatile
 80030de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e2:	f383 8811 	msr	BASEPRI, r3
 80030e6:	f3bf 8f6f 	isb	sy
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	607b      	str	r3, [r7, #4]
}
 80030f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80030f2:	f7fe fec9 	bl	8001e88 <xTaskIncrementTick>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80030fc:	4b06      	ldr	r3, [pc, #24]	@ (8003118 <xPortSysTickHandler+0x40>)
 80030fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	2300      	movs	r3, #0
 8003106:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	f383 8811 	msr	BASEPRI, r3
}
 800310e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	e000ed04 	.word	0xe000ed04

0800311c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003120:	4b0b      	ldr	r3, [pc, #44]	@ (8003150 <vPortSetupTimerInterrupt+0x34>)
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003126:	4b0b      	ldr	r3, [pc, #44]	@ (8003154 <vPortSetupTimerInterrupt+0x38>)
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800312c:	4b0a      	ldr	r3, [pc, #40]	@ (8003158 <vPortSetupTimerInterrupt+0x3c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0a      	ldr	r2, [pc, #40]	@ (800315c <vPortSetupTimerInterrupt+0x40>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	099b      	lsrs	r3, r3, #6
 8003138:	4a09      	ldr	r2, [pc, #36]	@ (8003160 <vPortSetupTimerInterrupt+0x44>)
 800313a:	3b01      	subs	r3, #1
 800313c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800313e:	4b04      	ldr	r3, [pc, #16]	@ (8003150 <vPortSetupTimerInterrupt+0x34>)
 8003140:	2207      	movs	r2, #7
 8003142:	601a      	str	r2, [r3, #0]
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	e000e010 	.word	0xe000e010
 8003154:	e000e018 	.word	0xe000e018
 8003158:	20000004 	.word	0x20000004
 800315c:	10624dd3 	.word	0x10624dd3
 8003160:	e000e014 	.word	0xe000e014

08003164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003164:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003174 <vPortEnableVFP+0x10>
 8003168:	6801      	ldr	r1, [r0, #0]
 800316a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800316e:	6001      	str	r1, [r0, #0]
 8003170:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003172:	bf00      	nop
 8003174:	e000ed88 	.word	0xe000ed88

08003178 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800317e:	f3ef 8305 	mrs	r3, IPSR
 8003182:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b0f      	cmp	r3, #15
 8003188:	d915      	bls.n	80031b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800318a:	4a18      	ldr	r2, [pc, #96]	@ (80031ec <vPortValidateInterruptPriority+0x74>)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003194:	4b16      	ldr	r3, [pc, #88]	@ (80031f0 <vPortValidateInterruptPriority+0x78>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	7afa      	ldrb	r2, [r7, #11]
 800319a:	429a      	cmp	r2, r3
 800319c:	d20b      	bcs.n	80031b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800319e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031a2:	f383 8811 	msr	BASEPRI, r3
 80031a6:	f3bf 8f6f 	isb	sy
 80031aa:	f3bf 8f4f 	dsb	sy
 80031ae:	607b      	str	r3, [r7, #4]
}
 80031b0:	bf00      	nop
 80031b2:	bf00      	nop
 80031b4:	e7fd      	b.n	80031b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80031b6:	4b0f      	ldr	r3, [pc, #60]	@ (80031f4 <vPortValidateInterruptPriority+0x7c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80031be:	4b0e      	ldr	r3, [pc, #56]	@ (80031f8 <vPortValidateInterruptPriority+0x80>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d90b      	bls.n	80031de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80031c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ca:	f383 8811 	msr	BASEPRI, r3
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	f3bf 8f4f 	dsb	sy
 80031d6:	603b      	str	r3, [r7, #0]
}
 80031d8:	bf00      	nop
 80031da:	bf00      	nop
 80031dc:	e7fd      	b.n	80031da <vPortValidateInterruptPriority+0x62>
	}
 80031de:	bf00      	nop
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	e000e3f0 	.word	0xe000e3f0
 80031f0:	20000d64 	.word	0x20000d64
 80031f4:	e000ed0c 	.word	0xe000ed0c
 80031f8:	20000d68 	.word	0x20000d68

080031fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	@ 0x28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003204:	2300      	movs	r3, #0
 8003206:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003208:	f7fe fd82 	bl	8001d10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800320c:	4b5c      	ldr	r3, [pc, #368]	@ (8003380 <pvPortMalloc+0x184>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003214:	f000 f924 	bl	8003460 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003218:	4b5a      	ldr	r3, [pc, #360]	@ (8003384 <pvPortMalloc+0x188>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	f040 8095 	bne.w	8003350 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d01e      	beq.n	800326a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800322c:	2208      	movs	r2, #8
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4413      	add	r3, r2
 8003232:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	2b00      	cmp	r3, #0
 800323c:	d015      	beq.n	800326a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f023 0307 	bic.w	r3, r3, #7
 8003244:	3308      	adds	r3, #8
 8003246:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <pvPortMalloc+0x6e>
	__asm volatile
 8003252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003256:	f383 8811 	msr	BASEPRI, r3
 800325a:	f3bf 8f6f 	isb	sy
 800325e:	f3bf 8f4f 	dsb	sy
 8003262:	617b      	str	r3, [r7, #20]
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	e7fd      	b.n	8003266 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d06f      	beq.n	8003350 <pvPortMalloc+0x154>
 8003270:	4b45      	ldr	r3, [pc, #276]	@ (8003388 <pvPortMalloc+0x18c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	429a      	cmp	r2, r3
 8003278:	d86a      	bhi.n	8003350 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800327a:	4b44      	ldr	r3, [pc, #272]	@ (800338c <pvPortMalloc+0x190>)
 800327c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800327e:	4b43      	ldr	r3, [pc, #268]	@ (800338c <pvPortMalloc+0x190>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003284:	e004      	b.n	8003290 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003288:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	429a      	cmp	r2, r3
 8003298:	d903      	bls.n	80032a2 <pvPortMalloc+0xa6>
 800329a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f1      	bne.n	8003286 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80032a2:	4b37      	ldr	r3, [pc, #220]	@ (8003380 <pvPortMalloc+0x184>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d051      	beq.n	8003350 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2208      	movs	r2, #8
 80032b2:	4413      	add	r3, r2
 80032b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80032b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80032be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	1ad2      	subs	r2, r2, r3
 80032c6:	2308      	movs	r3, #8
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d920      	bls.n	8003310 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80032ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4413      	add	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00b      	beq.n	80032f8 <pvPortMalloc+0xfc>
	__asm volatile
 80032e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	613b      	str	r3, [r7, #16]
}
 80032f2:	bf00      	nop
 80032f4:	bf00      	nop
 80032f6:	e7fd      	b.n	80032f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80032f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	1ad2      	subs	r2, r2, r3
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800330a:	69b8      	ldr	r0, [r7, #24]
 800330c:	f000 f90a 	bl	8003524 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003310:	4b1d      	ldr	r3, [pc, #116]	@ (8003388 <pvPortMalloc+0x18c>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	4a1b      	ldr	r2, [pc, #108]	@ (8003388 <pvPortMalloc+0x18c>)
 800331c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800331e:	4b1a      	ldr	r3, [pc, #104]	@ (8003388 <pvPortMalloc+0x18c>)
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	4b1b      	ldr	r3, [pc, #108]	@ (8003390 <pvPortMalloc+0x194>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d203      	bcs.n	8003332 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800332a:	4b17      	ldr	r3, [pc, #92]	@ (8003388 <pvPortMalloc+0x18c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a18      	ldr	r2, [pc, #96]	@ (8003390 <pvPortMalloc+0x194>)
 8003330:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	4b13      	ldr	r3, [pc, #76]	@ (8003384 <pvPortMalloc+0x188>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	431a      	orrs	r2, r3
 800333c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003346:	4b13      	ldr	r3, [pc, #76]	@ (8003394 <pvPortMalloc+0x198>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3301      	adds	r3, #1
 800334c:	4a11      	ldr	r2, [pc, #68]	@ (8003394 <pvPortMalloc+0x198>)
 800334e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003350:	f7fe fcec 	bl	8001d2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00b      	beq.n	8003376 <pvPortMalloc+0x17a>
	__asm volatile
 800335e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003362:	f383 8811 	msr	BASEPRI, r3
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	60fb      	str	r3, [r7, #12]
}
 8003370:	bf00      	nop
 8003372:	bf00      	nop
 8003374:	e7fd      	b.n	8003372 <pvPortMalloc+0x176>
	return pvReturn;
 8003376:	69fb      	ldr	r3, [r7, #28]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3728      	adds	r7, #40	@ 0x28
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20004974 	.word	0x20004974
 8003384:	20004988 	.word	0x20004988
 8003388:	20004978 	.word	0x20004978
 800338c:	2000496c 	.word	0x2000496c
 8003390:	2000497c 	.word	0x2000497c
 8003394:	20004980 	.word	0x20004980

08003398 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d04f      	beq.n	800344a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80033aa:	2308      	movs	r3, #8
 80033ac:	425b      	negs	r3, r3
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	4413      	add	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	4b25      	ldr	r3, [pc, #148]	@ (8003454 <vPortFree+0xbc>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10b      	bne.n	80033de <vPortFree+0x46>
	__asm volatile
 80033c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ca:	f383 8811 	msr	BASEPRI, r3
 80033ce:	f3bf 8f6f 	isb	sy
 80033d2:	f3bf 8f4f 	dsb	sy
 80033d6:	60fb      	str	r3, [r7, #12]
}
 80033d8:	bf00      	nop
 80033da:	bf00      	nop
 80033dc:	e7fd      	b.n	80033da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00b      	beq.n	80033fe <vPortFree+0x66>
	__asm volatile
 80033e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ea:	f383 8811 	msr	BASEPRI, r3
 80033ee:	f3bf 8f6f 	isb	sy
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	60bb      	str	r3, [r7, #8]
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	e7fd      	b.n	80033fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	4b14      	ldr	r3, [pc, #80]	@ (8003454 <vPortFree+0xbc>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4013      	ands	r3, r2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01e      	beq.n	800344a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d11a      	bne.n	800344a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	4b0e      	ldr	r3, [pc, #56]	@ (8003454 <vPortFree+0xbc>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	43db      	mvns	r3, r3
 800341e:	401a      	ands	r2, r3
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003424:	f7fe fc74 	bl	8001d10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	4b0a      	ldr	r3, [pc, #40]	@ (8003458 <vPortFree+0xc0>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4413      	add	r3, r2
 8003432:	4a09      	ldr	r2, [pc, #36]	@ (8003458 <vPortFree+0xc0>)
 8003434:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003436:	6938      	ldr	r0, [r7, #16]
 8003438:	f000 f874 	bl	8003524 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800343c:	4b07      	ldr	r3, [pc, #28]	@ (800345c <vPortFree+0xc4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3301      	adds	r3, #1
 8003442:	4a06      	ldr	r2, [pc, #24]	@ (800345c <vPortFree+0xc4>)
 8003444:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003446:	f7fe fc71 	bl	8001d2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800344a:	bf00      	nop
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20004988 	.word	0x20004988
 8003458:	20004978 	.word	0x20004978
 800345c:	20004984 	.word	0x20004984

08003460 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003466:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800346a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800346c:	4b27      	ldr	r3, [pc, #156]	@ (800350c <prvHeapInit+0xac>)
 800346e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00c      	beq.n	8003494 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	3307      	adds	r3, #7
 800347e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 0307 	bic.w	r3, r3, #7
 8003486:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	4a1f      	ldr	r2, [pc, #124]	@ (800350c <prvHeapInit+0xac>)
 8003490:	4413      	add	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003498:	4a1d      	ldr	r2, [pc, #116]	@ (8003510 <prvHeapInit+0xb0>)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800349e:	4b1c      	ldr	r3, [pc, #112]	@ (8003510 <prvHeapInit+0xb0>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	4413      	add	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80034ac:	2208      	movs	r2, #8
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0307 	bic.w	r3, r3, #7
 80034ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4a15      	ldr	r2, [pc, #84]	@ (8003514 <prvHeapInit+0xb4>)
 80034c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80034c2:	4b14      	ldr	r3, [pc, #80]	@ (8003514 <prvHeapInit+0xb4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2200      	movs	r2, #0
 80034c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80034ca:	4b12      	ldr	r3, [pc, #72]	@ (8003514 <prvHeapInit+0xb4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	1ad2      	subs	r2, r2, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80034e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003514 <prvHeapInit+0xb4>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003518 <prvHeapInit+0xb8>)
 80034ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4a09      	ldr	r2, [pc, #36]	@ (800351c <prvHeapInit+0xbc>)
 80034f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80034f8:	4b09      	ldr	r3, [pc, #36]	@ (8003520 <prvHeapInit+0xc0>)
 80034fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80034fe:	601a      	str	r2, [r3, #0]
}
 8003500:	bf00      	nop
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	20000d6c 	.word	0x20000d6c
 8003510:	2000496c 	.word	0x2000496c
 8003514:	20004974 	.word	0x20004974
 8003518:	2000497c 	.word	0x2000497c
 800351c:	20004978 	.word	0x20004978
 8003520:	20004988 	.word	0x20004988

08003524 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800352c:	4b28      	ldr	r3, [pc, #160]	@ (80035d0 <prvInsertBlockIntoFreeList+0xac>)
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	e002      	b.n	8003538 <prvInsertBlockIntoFreeList+0x14>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	429a      	cmp	r2, r3
 8003540:	d8f7      	bhi.n	8003532 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	4413      	add	r3, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	429a      	cmp	r2, r3
 8003552:	d108      	bne.n	8003566 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	441a      	add	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	441a      	add	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d118      	bne.n	80035ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	4b15      	ldr	r3, [pc, #84]	@ (80035d4 <prvInsertBlockIntoFreeList+0xb0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d00d      	beq.n	80035a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	441a      	add	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	e008      	b.n	80035b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80035a2:	4b0c      	ldr	r3, [pc, #48]	@ (80035d4 <prvInsertBlockIntoFreeList+0xb0>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	e003      	b.n	80035b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d002      	beq.n	80035c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035c2:	bf00      	nop
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	2000496c 	.word	0x2000496c
 80035d4:	20004974 	.word	0x20004974

080035d8 <memset>:
 80035d8:	4402      	add	r2, r0
 80035da:	4603      	mov	r3, r0
 80035dc:	4293      	cmp	r3, r2
 80035de:	d100      	bne.n	80035e2 <memset+0xa>
 80035e0:	4770      	bx	lr
 80035e2:	f803 1b01 	strb.w	r1, [r3], #1
 80035e6:	e7f9      	b.n	80035dc <memset+0x4>

080035e8 <__libc_init_array>:
 80035e8:	b570      	push	{r4, r5, r6, lr}
 80035ea:	4d0d      	ldr	r5, [pc, #52]	@ (8003620 <__libc_init_array+0x38>)
 80035ec:	4c0d      	ldr	r4, [pc, #52]	@ (8003624 <__libc_init_array+0x3c>)
 80035ee:	1b64      	subs	r4, r4, r5
 80035f0:	10a4      	asrs	r4, r4, #2
 80035f2:	2600      	movs	r6, #0
 80035f4:	42a6      	cmp	r6, r4
 80035f6:	d109      	bne.n	800360c <__libc_init_array+0x24>
 80035f8:	4d0b      	ldr	r5, [pc, #44]	@ (8003628 <__libc_init_array+0x40>)
 80035fa:	4c0c      	ldr	r4, [pc, #48]	@ (800362c <__libc_init_array+0x44>)
 80035fc:	f000 f826 	bl	800364c <_init>
 8003600:	1b64      	subs	r4, r4, r5
 8003602:	10a4      	asrs	r4, r4, #2
 8003604:	2600      	movs	r6, #0
 8003606:	42a6      	cmp	r6, r4
 8003608:	d105      	bne.n	8003616 <__libc_init_array+0x2e>
 800360a:	bd70      	pop	{r4, r5, r6, pc}
 800360c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003610:	4798      	blx	r3
 8003612:	3601      	adds	r6, #1
 8003614:	e7ee      	b.n	80035f4 <__libc_init_array+0xc>
 8003616:	f855 3b04 	ldr.w	r3, [r5], #4
 800361a:	4798      	blx	r3
 800361c:	3601      	adds	r6, #1
 800361e:	e7f2      	b.n	8003606 <__libc_init_array+0x1e>
 8003620:	080036e8 	.word	0x080036e8
 8003624:	080036e8 	.word	0x080036e8
 8003628:	080036e8 	.word	0x080036e8
 800362c:	080036ec 	.word	0x080036ec

08003630 <memcpy>:
 8003630:	440a      	add	r2, r1
 8003632:	4291      	cmp	r1, r2
 8003634:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003638:	d100      	bne.n	800363c <memcpy+0xc>
 800363a:	4770      	bx	lr
 800363c:	b510      	push	{r4, lr}
 800363e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003642:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003646:	4291      	cmp	r1, r2
 8003648:	d1f9      	bne.n	800363e <memcpy+0xe>
 800364a:	bd10      	pop	{r4, pc}

0800364c <_init>:
 800364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364e:	bf00      	nop
 8003650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003652:	bc08      	pop	{r3}
 8003654:	469e      	mov	lr, r3
 8003656:	4770      	bx	lr

08003658 <_fini>:
 8003658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365a:	bf00      	nop
 800365c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365e:	bc08      	pop	{r3}
 8003660:	469e      	mov	lr, r3
 8003662:	4770      	bx	lr
